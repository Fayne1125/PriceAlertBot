from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtCore import QCoreApplication, QPoint
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.keys import Keys
import time
import pickle
from selenium.webdriver.chrome.options import Options
import discord
import json
from discord.ext import commands
from discord.ext import tasks
import sys
from bs4 import BeautifulSoup
import requests
import numpy as np
import re
from fake_useragent import UserAgent
from discord_webhook import DiscordWebhook, DiscordEmbed
import multiprocessing
from multiprocessing import *
from threading import *
import Crypto
import pyrebase
from email_validator import validate_email, EmailNotValidError
from subprocess import CREATE_NO_WINDOW
from PyQt5 import QtTest

firebaseConfig = {'apiKey': "AIzaSyCLULMOxz00QiL6hkKqHmMB0UAFuiB_Usk",
  'authDomain': "nft-price-alert-db.firebaseapp.com",
  'projectId': "nft-price-alert-db",
  'storageBucket': "nft-price-alert-db.appspot.com",
  'messagingSenderId': "938854563570",
  'appId': "1:938854563570:web:1871fca30a22eafdac5a6b",
  'measurementId': "G-YCNNWVTZES",
  'databaseURL': "https://console.firebase.google.com/u/0/project/nft-price-alert-db/database/nft-price-alert-db-default-rtdb/data/~2F"}

firebase=pyrebase.initialize_app(firebaseConfig)
auth=firebase.auth()

setting = open("config.json", "r")
con = json.load(setting)

discord_webhook = con['discord_webhook']
username = con['username']
nft_image = []
nft_content= []
floor = [float(0)]


WINDOW_SIZE = 0;

class Ui_MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)


    def setupUi(self, MainWindow):
        MainWindow.setWindowFlags(Qt.FramelessWindowHint)
        MainWindow.setObjectName("Price Alert Application")
        MainWindow.resize(1600, 891)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget) 
        self.stackedWidget.setGeometry(QtCore.QRect(0, 0, 1601, 901))
        self.stackedWidget.setObjectName("stackedWidget")
        self.count = 0
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page") 
        self.fontT = QtGui.QFont()
        self.fontT.setFamily("Courier")
        self.fontT.setPointSize(50)
        self.fontT.setBold(True)
        self.fontT.setWeight(75)
        self.font1 = QtGui.QFont()
        self.font1.setFamily("Courier")
        self.font1.setPointSize(10)
        self.font1.setBold(True)
        self.font1.setWeight(75)
        self.frame_title = QtWidgets.QFrame(self.page)
        self.frame_title.setGeometry(QtCore.QRect(0, 0, 1600, 35))
        self.frame_title.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_title.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_title.setObjectName("frame_title")
        self.frame_exit = QtWidgets.QPushButton('X')
        self.frame_exit.setFont(self.fontT)
        self.frame_exit.clicked.connect(self.exitProgram) 
        self.frame_enlarge = QtWidgets.QPushButton('o')
        self.frame_enlarge.setFont(self.fontT)
        self.frame_enlarge.clicked.connect(self.restoreSize)
        self.frame_min = QtWidgets.QPushButton('-',self)
        self.frame_min.setFont(self.fontT)
        self.frame_min.clicked.connect(lambda: self.showMinimized())
        self.hbox_title = QHBoxLayout(self.frame_title)
        self.hbox_title.addStretch(1)
        self.hbox_title.addWidget(self.frame_min)
        self.hbox_title.addWidget(self.frame_enlarge)
        self.hbox_title.addWidget(self.frame_exit)
        self.frame_title.setStyleSheet("background-color: black; color: #bab9b9")
        self.frame = QtWidgets.QFrame(self.page)
        self.frame.setGeometry(QtCore.QRect(-1, 34, 1602, 865))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.frame.setStyleSheet("background-image: url(sources/bg.jpg)")
        self.frame_title.setStyleSheet("background-color: black; color: #bab9b9")
        self.frame_home = QtWidgets.QFrame(self.page)
        self.frame_home.setGeometry(QtCore.QRect(515, 250, 600, 400))
        self.frame_home.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_home.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_home.setObjectName("frame_home")
        self.frame_home.setStyleSheet("background-color: rgba(255,255,255,100)")
        self.frame_widget = QtWidgets.QFrame(self.page)
        self.frame_widget.setGeometry(QtCore.QRect(515, 250, 600, 400))
        self.frame_widget.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_widget.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_widget.setObjectName("frame_widget")
        self.frame_widget.setStyleSheet("background-color: transparent")
        blur_effect = QtWidgets.QGraphicsBlurEffect(blurRadius=10)
        self.frame_home.setGraphicsEffect(blur_effect)
        self.frame_widget.setAttribute(QtCore.Qt.WA_TranslucentBackground, True)
        self.frame_home.setWindowOpacity(0.5)
        self.label_logo = QtWidgets.QLabel(self.frame_widget)
        self.label_logo.setGeometry(QtCore.QRect(50, 10, 500, 100))
        self.label_logo.setAlignment(QtCore.Qt.AlignCenter)
        self.label_logo.setObjectName("label_logo")
        self.pixmap = QPixmap('sources/logo.png')
        self.label_logo.setPixmap(self.pixmap)
        self.label_logo.resize(500,150)
        self.fontI = QtGui.QFont()
        self.fontI.setFamily("Courier")
        self.fontI.setPointSize(15)
        self.fontI.setBold(True)
        self.fontI.setWeight(70)
        self.email_login = QtWidgets.QLineEdit(self.frame_widget)
        self.email_login.setStyleSheet("background-color: transparent; color:black")
        self.fontdefault = QtGui.QFont()
        self.fontdefault.setFamily("Courier")
        self.fontdefault.setPointSize(10)
        self.fontdefault.setWeight(75)
        self.email_login.setFont(self.fontI)
        self.email_login.setGeometry(QtCore.QRect(90, 175, 426, 31))
        self.email_login.setObjectName("email_login")
        self.pw_login = QtWidgets.QLineEdit(self.frame_widget)
        self.pw_login.setEchoMode(QtWidgets.QLineEdit.Password)
        self.pw_login.setFont(self.fontI)
        self.pw_login.setGeometry(QtCore.QRect(90, 250, 426, 31))
        self.pw_login.setText("")
        self.pw_login.setObjectName("pw_login")
        self.pw_login.setStyleSheet("background-color: transparent; color:black")
        self.email_label = QtWidgets.QLabel(self.frame_widget)
        self.email_label.setGeometry(QtCore.QRect(190, 150, 221, 20))
        self.font = QtGui.QFont()
        self.font.setFamily("Courier")
        self.font.setPointSize(15)
        self.font.setBold(True)
        self.font.setWeight(75)
        self.fontTaskbar= QtGui.QFont()
        self.fontTaskbar.setFamily("Courier")
        self.fontTaskbar.setPointSize(50)
        self.fontTaskbar.setBold(True)
        self.fontTaskbar.setWeight(75)
        self.email_label.setFont(self.font)
        self.email_label.setAlignment(QtCore.Qt.AlignCenter)
        self.email_label.setObjectName("email_label")
        self.pw_label = QtWidgets.QLabel(self.frame_widget)
        self.pw_label.setGeometry(QtCore.QRect(190, 225, 221, 20))
        self.pw_label.setFont(self.font)
        self.pw_label.setAlignment(QtCore.Qt.AlignCenter)
        self.pw_label.setObjectName("pw_label")
        self.pushButton_3 = QtWidgets.QPushButton(self.frame_widget)
        self.pushButton_3.setGeometry(QtCore.QRect(140, 300, 150, 31))
        self.pushButton_3.setStyleSheet("background-color: #181414; color:#d1d0d0")
        self.pushButton_3.setFont(self.font)
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.LoginValidation)
        self.pushButton_3.clicked.connect(self.dashboardFetch)
        self.pushButton_r = QtWidgets.QPushButton(self.frame_widget)
        self.pushButton_r.setGeometry(QtCore.QRect(320, 300, 150, 31))
        self.pushButton_r.setStyleSheet("background-color: #181414; color:#d1d0d0")
        self.pushButton_r.setFont(self.font)
        self.pushButton_r.setObjectName("pushButton_r")
        self.pushButton_r.clicked.connect(self.SignUpPage)
        self.frame_notificationL = QLabel(self.page)
        self.frame_notificationL.setFont(self.font)
        self.frame_notificationL.setAlignment(QtCore.Qt.AlignCenter)
        self.frame_notificationL.setStyleSheet(
                    "background-color: rgba(255,255,255,100);"
                    "border-top-left-radius :10px;"
                    "border-top-right-radius : 10px; "
                    "border-bottom-left-radius : 10px; "
                    "border-bottom-right-radius : 10px"
                    )
        self.frame_notificationL.setGeometry(QtCore.QRect(1200,780,360,100))
        self.frame_notificationL.hide()
        self.stackedWidget.addWidget(self.page)
        #taskpage
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.frame_title2 = QtWidgets.QFrame(self.page_2)
        self.frame_title2.setGeometry(QtCore.QRect(0, 0, 1600, 35))
        self.frame_title2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_title2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_title2.setObjectName("frame_title2")
        self.frame_exit2 = QtWidgets.QPushButton('X')
        self.frame_exit2.setFont(self.fontT)
        self.frame_exit2.clicked.connect(self.exitProgram)
        self.frame_enlarge2 = QtWidgets.QPushButton('o')
        self.frame_enlarge2.setFont(self.fontT)
        self.frame_enlarge2.clicked.connect(self.restoreSize)
        self.frame_min2 = QtWidgets.QPushButton('-')
        self.frame_min2.setFont(self.fontT)
        self.frame_min2.clicked.connect(self.minimizedProgram)
        self.hbox_title2 = QHBoxLayout(self.frame_title2)
        self.hbox_title2.addStretch(1)
        self.hbox_title2.addWidget(self.frame_min2)
        self.hbox_title2.addWidget(self.frame_enlarge2)
        self.hbox_title2.addWidget(self.frame_exit2)
        self.frame_title2.setStyleSheet("background-color: black; color: #bab9b9")
        self.fontL = QtGui.QFont()
        self.fontL.setFamily("Courier")
        self.fontL.setPointSize(30)
        self.fontL.setBold(True)
        self.fontL.setWeight(75)
        self.frame_menu = QtWidgets.QFrame(self.page_2)
        self.frame_menu.setGeometry(QtCore.QRect(280,85,1321,50))
        self.frame_menu.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_menu.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_menu.setStyleSheet("background-color: #7d1b94; color: #bab9b9")
        self.frame_menu.setObjectName("frame_menu")
        self.label_menu = QtWidgets.QLabel('No.')
        self.label2_menu = QtWidgets.QLabel('Project')
        self.label3_menu = QtWidgets.QLabel('Interval')
        self.label4_menu = QtWidgets.QLabel('Alert Mode') 
        self.label_menu.setFont(self.fontL)
        self.label2_menu.setFont(self.fontL)
        self.label3_menu.setFont(self.fontL)   
        self.label4_menu.setFont(self.fontL)
        self.hbox_menu = QHBoxLayout(self.frame_menu)
        self.hbox_menu.addWidget(self.label_menu)
        self.hbox_menu.addStretch(1)
        self.hbox_menu.addWidget(self.label2_menu)
        self.hbox_menu.addStretch(1)
        self.hbox_menu.addWidget(self.label3_menu)
        self.hbox_menu.addStretch(1)
        self.hbox_menu.addWidget(self.label4_menu)
        self.label4_menu.setAlignment(QtCore.Qt.AlignCenter)
        self.label3_menu.setAlignment(QtCore.Qt.AlignCenter)
        self.label2_menu.setAlignment(QtCore.Qt.AlignCenter)
        self.label_menu.setAlignment(QtCore.Qt.AlignCenter)
        self.frame_page2 = QFrame(self.page_2)
        self.frame_page2.setGeometry(QtCore.QRect(280, 124, 1321, 826))
        self.frame_page2.setStyleSheet("background-image: url(sources/bg2.jpg)")
        self.frame_trans2 = QFrame(self.page_2)
        self.frame_trans2.setGeometry(QtCore.QRect(280, 124, 1321, 826))
        self.frame_trans2.setStyleSheet("background-image: transparent")
        self.listWidget = QtWidgets.QListWidget(self.page_2)
        self.listWidget.setStyleSheet("background-color: rgba(255,255,255,45)")
        self.listWidget.setGeometry(QtCore.QRect(280, 124, 1321, 826))
        self.listWidget.setObjectName("listWidget")
        self.frame_2 = QtWidgets.QFrame(self.page_2)
        self.frame_2.setGeometry(QtCore.QRect(0, 35, 281, 901))
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.frame_2.setStyleSheet("background-color: #a76bb5")
        self.uniform_logo_labelT = QtWidgets.QLabel(self.frame_2)
        self.uniform_logo_labelT.setGeometry(QtCore.QRect(0, 0, 281, 265))
        self.uniform_logo_labelT.setAlignment(QtCore.Qt.AlignCenter)
        self.uniform_logo_labelT.setObjectName("uniform_logo_label")
        self.uniform_logo_labelT.setStyleSheet("background-color: #7d1b94")
        self.uniform_logoT = QtWidgets.QLabel(self.frame_2)
        self.uniform_logoT.setGeometry(QtCore.QRect(10, 0, 281, 265))
        self.uniform_logoT.setAlignment(QtCore.Qt.AlignCenter)
        self.uniform_logoT.setObjectName("uniform_logoS")
        self.uniform_logoT.setStyleSheet("background-color: #7d1b94")
        self.pixmapT = QPixmap('sources/big_logo.png')
        self.uniform_logoT.setPixmap(self.pixmapT)
        self.uniform_logoT.resize(256,245)
        self.welcome_textT = QLabel(self.frame_2)
        self.welcome_textT.setGeometry(QtCore.QRect(0, 250, 281, 111))
        self.welcome_textT.setFont(self.font)
        self.welcome_textT.setAlignment(QtCore.Qt.AlignCenter)
        self.welcome_textT.setText("\n\nWelcome Back, \n"+str(username)+"\n Task Running: 0")
        self.dash_btn = QtWidgets.QPushButton(self.frame_2)
        self.dash_btn.setGeometry(QtCore.QRect(0, 380, 281, 91))
        self.dash_btn.setFont(self.fontTaskbar)
        self.dash_btn.setObjectName("dash_btn")
        self.dash_btn.clicked.connect(self.DashPage)
        self.dash_btn.setStyleSheet("background-color: #2F7AE5; color:#d1d0d0")
        self.dash_btn.setIcon(QIcon('sources/home.png'))
        self.dash_btn.setIconSize(QtCore.QSize(50,50))
        self.task_btn1 = QtWidgets.QPushButton(self.frame_2)
        self.task_btn1.setGeometry(QtCore.QRect(0, 471, 281, 113))
        self.task_btn1.setFont(self.fontTaskbar)
        self.task_btn1.setObjectName("task_btn1")
        self.task_btn1.clicked.connect(self.TaskPage)
        self.task_btn1.setStyleSheet("background-color: #0836C1; color:#d1d0d0")
        self.task_btn1.setIcon(QIcon('sources/bell.png'))
        self.task_btn1.setIconSize(QtCore.QSize(50,50))
        self.UI_btn1 = QtWidgets.QPushButton(self.frame_2)
        self.UI_btn1.setGeometry(QtCore.QRect(0, 584, 281, 91))
        self.UI_btn1.setFont(self.fontTaskbar)
        self.UI_btn1.setObjectName("UI_btn1")
        self.UI_btn1.clicked.connect(self.UIPage)
        self.UI_btn1.setStyleSheet("background-color: #2F7AE5; color:#d1d0d0")
        self.UI_btn1.setIcon(QIcon('sources/user.png'))
        self.UI_btn1.setIconSize(QtCore.QSize(50,50))
        self.S_btn1 = QtWidgets.QPushButton(self.frame_2)
        self.S_btn1.setGeometry(QtCore.QRect(0, 675, 281, 90))
        self.S_btn1.setFont(self.fontTaskbar)
        self.S_btn1.setObjectName("S_btn1")
        self.S_btn1.clicked.connect(self.CPage)
        self.S_btn1.setStyleSheet("background-color: #2F7AE5; color:#d1d0d0")
        self.S_btn1.setIcon(QIcon('sources/questions.png'))
        self.S_btn1.setIconSize(QtCore.QSize(50,50))
        self.logout_btn1 = QtWidgets.QPushButton(self.frame_2)
        self.logout_btn1.setGeometry(QtCore.QRect(0, 765, 281, 91))
        self.logout_btn1.setStyleSheet("background-color: #439CEF; color:#d1d0d0")
        self.logout_btn1.setFont(self.fontTaskbar)
        self.logout_btn1.clicked.connect(self.logoutConfirmation)
        self.logout_btn1.setObjectName("logout_btn1")
        self.logout_btn1.setIcon(QIcon('sources/logout.png'))
        self.logout_btn1.setIconSize(QtCore.QSize(50,50))
        self.frame_3 = QtWidgets.QFrame(self.page_2)
        self.frame_3.setGeometry(QtCore.QRect(281, 35, 1321, 61))
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.frame_3.setStyleSheet("background-color: #7d1b94")
        self.hbox_task = QHBoxLayout(self.frame_3)
        self.stopAll_btn = QtWidgets.QPushButton()
        self.stopAll_btn.setGeometry(QtCore.QRect(478,0, 281, 90))
        self.stopAll_btn.setStyleSheet("background-color: #571666; color:#d1d0d0")
        self.clear_btn = QtWidgets.QPushButton()
        self.clear_btn.setGeometry(QtCore.QRect(759,0, 281, 90))
        self.clear_btn.setStyleSheet("background-color: #571666; color:#d1d0d0")
        self.create_btn = QtWidgets.QPushButton()
        self.create_btn.setGeometry(QtCore.QRect(1040, 0, 281, 90))
        self.create_btn.setStyleSheet("background-color: #571666; color:#d1d0d0")
        self.stopAll_btn.setFont(self.font)
        self.stopAll_btn.setObjectName("stopAll_btn")
        self.stopAll_btn.clicked.connect(self.stopAll)
        self.create_btn.setFont(self.font)
        self.create_btn.setObjectName("create_btn")
        self.create_btn.clicked.connect(self.createTask)
        self.clear_btn.setFont(self.font)
        self.clear_btn.setObjectName("clear_btn")
        self.clear_btn.clicked.connect(self.removeAll)
        self.hbox_task.addWidget(self.create_btn)
        self.hbox_task.addWidget(self.stopAll_btn)
        self.hbox_task.addWidget(self.clear_btn)
        self.frame_notificationT = QLabel(self.page_2)
        self.frame_notificationT.setFont(self.font)
        self.frame_notificationT.setAlignment(QtCore.Qt.AlignCenter)
        self.frame_notificationT.setStyleSheet(
                    "background-color: rgba(255,255,255,100);"
                    "border-top-left-radius :10px;"
                    "border-top-right-radius : 10px; "
                    "border-bottom-left-radius : 10px; "
                    "border-bottom-right-radius : 10px"
                    )
        self.frame_notificationT.setGeometry(QtCore.QRect(1200,780,360,100))
        self.frame_notificationT.hide()
        self.stackedWidget.addWidget(self.page_2)
        #endoftaskpage
        #uipage
        self.page_3 = QtWidgets.QWidget()
        self.page_3.setObjectName("page_3")
        self.frame_title3 = QtWidgets.QFrame(self.page_3)
        self.frame_title3.setGeometry(QtCore.QRect(0, 0, 1600, 35))
        self.frame_title3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_title3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_title3.setObjectName("frame_title3")
        self.frame_exit3 = QtWidgets.QPushButton('X')
        self.frame_exit3.setFont(self.fontT)
        self.frame_exit3.clicked.connect(self.exitProgram)
        self.frame_enlarge3 = QtWidgets.QPushButton('o')
        self.frame_enlarge3.setFont(self.fontT)
        self.frame_enlarge3.clicked.connect(self.restoreSize)
        self.frame_min3 = QtWidgets.QPushButton('-')
        self.frame_min3.setFont(self.fontT)
        self.frame_min3.clicked.connect(self.minimizedProgram)
        self.hbox_title3 = QHBoxLayout(self.frame_title3)
        self.hbox_title3.addStretch(1)
        self.hbox_title3.addWidget(self.frame_min3)
        self.hbox_title3.addWidget(self.frame_enlarge3)
        self.hbox_title3.addWidget(self.frame_exit3)
        self.frame_title3.setStyleSheet("background-color: black; color: #bab9b9")
        self.frame_4 = QtWidgets.QFrame(self.page_3)
        self.frame_4.setGeometry(QtCore.QRect(0, 35, 281, 901))
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.frame_4.setStyleSheet("background-color: #a76bb5")
        self.uniform_logo_labelI = QtWidgets.QLabel(self.frame_4)
        self.uniform_logo_labelI.setGeometry(QtCore.QRect(0, 0, 281, 265))
        self.uniform_logo_labelI.setAlignment(QtCore.Qt.AlignCenter)
        self.uniform_logo_labelI.setObjectName("uniform_logo_label")
        self.uniform_logo_labelI.setStyleSheet("background-color: #7d1b94")
        self.uniform_logoI = QtWidgets.QLabel(self.frame_4)
        self.uniform_logoI.setGeometry(QtCore.QRect(10, 0, 281, 265))
        self.uniform_logoI.setAlignment(QtCore.Qt.AlignCenter)
        self.uniform_logoI.setObjectName("uniform_logoS")
        self.uniform_logoI.setStyleSheet("background-color: #7d1b94")
        self.pixmapI = QPixmap('sources/big_logo.png')
        self.uniform_logoI.setPixmap(self.pixmapI)
        self.uniform_logoI.resize(256,245)
        self.welcome_textI = QLabel(self.frame_4)
        self.welcome_textI.setGeometry(QtCore.QRect(0, 250, 281, 111))
        self.welcome_textI.setFont(self.font)
        self.welcome_textI.setAlignment(QtCore.Qt.AlignCenter)
        self.welcome_textI.setText("\n\nWelcome Back, \n"+str(username)+"\n Task Running: 0")
        self.dash_btn2 = QtWidgets.QPushButton(self.frame_4)
        self.dash_btn2.setGeometry(QtCore.QRect(0, 380, 281, 91))
        self.dash_btn2.setFont(self.fontTaskbar)
        self.dash_btn2.setObjectName("dash_btn2")
        self.dash_btn2.clicked.connect(self.DashPage)
        self.dash_btn2.setStyleSheet("background-color: #2F7AE5; color:#d1d0d0")
        self.dash_btn2.setIcon(QIcon('sources/home.png'))
        self.dash_btn2.setIconSize(QtCore.QSize(50,50))
        self.task_btn2 = QtWidgets.QPushButton(self.frame_4)
        self.task_btn2.setGeometry(QtCore.QRect(0, 471, 281, 91))
        self.task_btn2.setFont(self.fontTaskbar)
        self.task_btn2.setObjectName("task_btn2")
        self.task_btn2.clicked.connect(self.TaskPage)
        self.task_btn2.setStyleSheet("background-color: #2F7AE5; color:#d1d0d0")
        self.task_btn2.setIcon(QIcon('sources/bell.png'))
        self.task_btn2.setIconSize(QtCore.QSize(50,50))
        self.UI_btn2 = QtWidgets.QPushButton(self.frame_4)
        self.UI_btn2.setGeometry(QtCore.QRect(0, 562, 281, 113))
        self.UI_btn2.setFont(self.fontTaskbar)
        self.UI_btn2.setObjectName("UI_btn2")
        self.UI_btn2.setStyleSheet("background-color: #0836C1; color:#d1d0d0")
        self.UI_btn2.clicked.connect(self.UIPage)
        self.UI_btn2.setIcon(QIcon('sources/user.png'))
        self.UI_btn2.setIconSize(QtCore.QSize(50,50))
        self.logout_btn2 = QtWidgets.QPushButton(self.frame_4)
        self.logout_btn2.setGeometry(QtCore.QRect(0, 765, 281, 91))
        self.logout_btn2.setFont(self.fontTaskbar)
        self.logout_btn2.clicked.connect(self.logoutConfirmation)
        self.logout_btn2.setObjectName("logout_btn2")
        self.logout_btn2.setStyleSheet("background-color: #439CEF; color:#d1d0d0")
        self.logout_btn2.setIcon(QIcon('sources/logout.png'))
        self.logout_btn2.setIconSize(QtCore.QSize(50,50))
        self.frame_6 = QtWidgets.QFrame(self.page_3)
        self.frame_6.setGeometry(QtCore.QRect(280, 34, 1321, 901))
        self.frame_6.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_6.setObjectName("frame_6")
        self.frame_6.setStyleSheet("background-image: url(sources/bg2.jpg)")
        self.frame_t3 = QtWidgets.QFrame(self.page_3)
        self.frame_t3.setGeometry(QtCore.QRect(280, 35, 1321, 901))
        self.frame_t3.setStyleSheet("background-color: rgba(255,255,255,50)")
        font = QtGui.QFont()
        font.setFamily("Courier")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_31 = QtWidgets.QLabel(self.frame_t3)
        self.label_31.setGeometry(QtCore.QRect(250, 315, 251, 16))
        self.label_31.setStyleSheet("background-color: transparent; color:#d1d0d0")
        self.label_31.setFont(font)
        self.label_31.setAlignment(QtCore.Qt.AlignCenter)
        self.label_31.setObjectName("label_31")
        self.S_btn2 = QtWidgets.QPushButton(self.frame_4)
        self.S_btn2.setGeometry(QtCore.QRect(0, 675, 281, 91))
        self.S_btn2.setFont(self.fontTaskbar)
        self.S_btn2.setObjectName("S_btn2")
        self.S_btn2.clicked.connect(self.CPage)
        self.S_btn2.setStyleSheet("background-color: #2F7AE5; color:#d1d0d0")
        self.S_btn2.setIcon(QIcon('sources/questions.png'))
        self.S_btn2.setIconSize(QtCore.QSize(50,50))
        self.lineEdit_8 = QtWidgets.QLineEdit(self.frame_t3)
        self.lineEdit_8.setGeometry(QtCore.QRect(500, 304, 350, 30))
        self.lineEdit_8.setObjectName("lineEdit_8")
        self.lineEdit_8.setFont(self.fontdefault)
        self.lineEdit_8.setStyleSheet("background-color: #bab9b9; color:black")
        self.lineEdit_8.setReadOnly(True)
        self.username_input = QtWidgets.QLineEdit(self.frame_t3)
        self.username_input.setGeometry(QtCore.QRect(500, 404, 350, 30))
        self.username_input.setObjectName("username_input")
        self.username_input.setStyleSheet("background-color: #bab9b9; color:black")
        self.username_input.setText(username)
        self.username_input.setFont(self.fontdefault)
        self.username_label = QtWidgets.QLabel(self.frame_t3)
        self.username_label.setGeometry(QtCore.QRect(250, 415, 251, 16))
        self.username_label.setStyleSheet("background-color: transparent; color:#d1d0d0")
        self.username_label.setFont(font)
        self.username_label.setAlignment(QtCore.Qt.AlignCenter)
        self.username_label.setObjectName("username_label")
        self.username_label.setText("UserName")
        self.label_27 = QtWidgets.QLabel(self.frame_t3)
        self.label_27.setGeometry(QtCore.QRect(250, 510, 181, 16))
        self.label_27.setFont(font)
        self.label_27.setStyleSheet("background-color:transparent; color: #d1d0d0")
        self.label_27.setAlignment(QtCore.Qt.AlignCenter)
        self.label_27.setObjectName("label_27")
        self.frame_btn4 = QFrame(self.frame_t3)
        self.frame_btn4.setGeometry(QtCore.QRect(580, 570, 180, 30))
        self.frame_btn4.setStyleSheet("background-color: #571666; color:#d1d0d0")
        self.pushButton_4 = QtWidgets.QPushButton(self.frame_t3)
        self.pushButton_4.setGeometry(QtCore.QRect(580, 570, 181, 30))
        self.frame_btn5 = QFrame(self.frame_t3)
        self.frame_btn5.setGeometry(QtCore.QRect(900, 500, 151, 30))
        self.frame_btn5.setStyleSheet("background-color: #571666; color:#d1d0d0")
        self.pushButton_test = QtWidgets.QPushButton(self.frame_t3)
        self.pushButton_test.setGeometry(QtCore.QRect(900, 500, 150, 30)) 
        self.pushButton_test.setFont(font)
        self.pushButton_test.setStyleSheet("background-color: #571666; color:#d1d0d0")
        self.pushButton_test.clicked.connect(self.webhook_test)
        font = QtGui.QFont()
        font.setFamily("Courier")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.setStyleSheet("background-color: transparent; color:#d1d0d0")
        self.lineEdit_10 = QtWidgets.QLineEdit(self.frame_t3)
        self.lineEdit_10.setGeometry(QtCore.QRect(500, 500, 350, 30))
        self.lineEdit_10.setObjectName("lineEdit_10")
        self.lineEdit_10.setStyleSheet("background-color: #bab9b9; color:black")
        self.lineEdit_10.setText(discord_webhook)
        self.lineEdit_10.setFont(self.fontdefault)
        self.pushButton_4.clicked.connect(self.username_modification)
        self.pushButton_4.clicked.connect(self.webhook_modification)
        self.frame_notificationC = QLabel(self.page_3)
        self.frame_notificationC.setFont(self.font)
        self.frame_notificationC.setAlignment(QtCore.Qt.AlignCenter)
        self.frame_notificationC.setStyleSheet(
                    "background-color: rgba(255,255,255,100);"
                    "border-top-left-radius :10px;"
                    "border-top-right-radius : 10px; "
                    "border-bottom-left-radius : 10px; "
                    "border-bottom-right-radius : 10px"
                    )
        self.frame_notificationC.setGeometry(QtCore.QRect(1200,780,360,100))
        self.frame_notificationC.hide()
        self.stackedWidget.addWidget(self.page_3)
        #endofuipage
        #supportpage
        self.page_4 = QtWidgets.QWidget()
        self.page_4.setObjectName("page_4")
        self.frame_title4 = QtWidgets.QFrame(self.page_4)
        self.frame_title4.setGeometry(QtCore.QRect(0, 0, 1600, 35))
        self.frame_title4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_title4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_title4.setObjectName("frame_title4")
        self.frame_exit4 = QtWidgets.QPushButton('X')
        self.frame_exit4.setFont(self.fontT)
        self.frame_exit4.clicked.connect(self.exitProgram)
        self.frame_enlarge4 = QtWidgets.QPushButton('o')
        self.frame_enlarge4.setFont(self.fontT)
        self.frame_enlarge4.clicked.connect(self.restoreSize)
        self.frame_min4 = QtWidgets.QPushButton('-')
        self.frame_min4.setFont(self.fontT)
        self.frame_min4.clicked.connect(self.minimizedProgram)
        self.hbox_title4 = QHBoxLayout(self.frame_title4)
        self.hbox_title4.addStretch(1)
        self.hbox_title4.addWidget(self.frame_min4)
        self.hbox_title4.addWidget(self.frame_enlarge4)
        self.hbox_title4.addWidget(self.frame_exit4)
        self.frame_title4.setStyleSheet("background-color: black; color: #bab9b9")
        self.frame_5 = QtWidgets.QFrame(self.page_4)
        self.frame_5.setGeometry(QtCore.QRect(0, 35, 281, 901))
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.frame_5.setStyleSheet("background-color: #a76bb5")
        self.uniform_logo_labelS = QtWidgets.QLabel(self.frame_5)
        self.uniform_logo_labelS.setGeometry(QtCore.QRect(0, 0, 281, 265))
        self.uniform_logo_labelS.setAlignment(QtCore.Qt.AlignCenter)
        self.uniform_logo_labelS.setObjectName("uniform_logo_label")
        self.uniform_logo_labelS.setStyleSheet("background-color: #7d1b94")
        self.uniform_logoS = QtWidgets.QLabel(self.frame_5)
        self.uniform_logoS.setGeometry(QtCore.QRect(10, 0, 281, 265))
        self.uniform_logoS.setAlignment(QtCore.Qt.AlignCenter)
        self.uniform_logoS.setObjectName("uniform_logoS")
        self.uniform_logoS.setStyleSheet("background-color: #7d1b94")
        self.pixmapS = QPixmap('sources/big_logo.png')
        self.uniform_logoS.setPixmap(self.pixmapS)
        self.uniform_logoS.resize(256,245)
        self.welcome_textS = QLabel(self.frame_5)
        self.welcome_textS.setGeometry(QtCore.QRect(0, 250, 281, 111))
        self.welcome_textS.setFont(self.font)
        self.welcome_textS.setAlignment(QtCore.Qt.AlignCenter)
        self.welcome_textS.setText("\n\nWelcome Back, \n"+str(username)+"\n Task Running: 0")
        self.dash_btn3 = QtWidgets.QPushButton(self.frame_5)
        self.dash_btn3.setGeometry(QtCore.QRect(0, 380, 281, 91))
        self.dash_btn3.setFont(self.fontTaskbar)
        self.dash_btn3.setObjectName("dash_btn3")
        self.dash_btn3.clicked.connect(self.DashPage)
        self.dash_btn3.setStyleSheet("background-color: #2F7AE5; color:#d1d0d0")
        self.dash_btn3.setIcon(QIcon('sources/home.png'))
        self.dash_btn3.setIconSize(QtCore.QSize(50,50))
        self.task_btn3 = QtWidgets.QPushButton(self.frame_5)
        self.task_btn3.setGeometry(QtCore.QRect(0, 471, 281, 91))
        self.task_btn3.setFont(self.fontTaskbar)
        self.task_btn3.setObjectName("task_btn3")
        self.task_btn3.clicked.connect(self.TaskPage)
        self.task_btn3.setStyleSheet("background-color: #2F7AE5; color:#d1d0d0")
        self.task_btn3.setIcon(QIcon('sources/bell.png'))
        self.task_btn3.setIconSize(QtCore.QSize(50,50))
        self.UI_btn3 = QtWidgets.QPushButton(self.frame_5)
        self.UI_btn3.setGeometry(QtCore.QRect(0, 562, 281, 91))
        self.UI_btn3.setFont(self.fontTaskbar)
        self.UI_btn3.setObjectName("UI_btn3")
        self.UI_btn3.clicked.connect(self.UIPage)
        self.UI_btn3.setStyleSheet("background-color: #2F7AE5; color:#d1d0d0")
        self.UI_btn3.setIcon(QIcon('sources/user.png'))
        self.UI_btn3.setIconSize(QtCore.QSize(50,50))
        self.S_btn3 = QtWidgets.QPushButton(self.frame_5)
        self.S_btn3.setGeometry(QtCore.QRect(0, 653, 281, 112))
        self.S_btn3.setFont(self.fontTaskbar)
        self.S_btn3.setObjectName("S_btn3")
        self.S_btn3.setStyleSheet("background-color: #0836C1; color:#d1d0d0")
        self.S_btn3.clicked.connect(self.CPage)
        self.S_btn3.setIcon(QIcon('sources/questions.png'))
        self.S_btn3.setIconSize(QtCore.QSize(50,50))
        self.logout_btn3 = QtWidgets.QPushButton(self.frame_5)
        self.logout_btn3.setGeometry(QtCore.QRect(0, 765, 281, 91))
        self.logout_btn3.setFont(self.fontTaskbar)
        self.logout_btn3.setObjectName("logout_btn3")
        self.logout_btn3.clicked.connect(self.logoutConfirmation)
        self.logout_btn3.setStyleSheet("background-color: #439CEF; color:#d1d0d0")
        self.logout_btn3.setIcon(QIcon('sources/logout.png'))
        self.logout_btn3.setIconSize(QtCore.QSize(50,50))
        self.frame_7 = QtWidgets.QFrame(self.page_4)
        self.frame_7.setGeometry(QtCore.QRect(280, 34, 1321, 901))
        self.frame_7.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_7.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_7.setObjectName("frame_7")
        self.frame_7.setStyleSheet("background-image: url(sources/bg2.jpg)")
        self.frame_t4 = QtWidgets.QFrame(self.page_4)
        self.frame_t4.setGeometry(QtCore.QRect(280, 35, 1321, 901))
        self.frame_t4.setStyleSheet("background-color: rgba(255,255,255,50)")
        self.scroll_s = QtWidgets.QScrollArea(self.page_4)
        self.scroll_s.setGeometry(QtCore.QRect(280, 35, 1340, 880))
        self.scroll_s.setStyleSheet("background-color: rgba(255,255,255,50)")
        self.scroll_s.setAlignment(QtCore.Qt.AlignCenter)
        self.tut1 = QImage('sources/sp1.png')
        self.tut2 = QImage('sources/sp2.png')
        self.tut3 = QImage('sources/profile_discord.png')
        self.tut4 = QImage('sources/webhook_done.png')
        self.webhook_tut = QLabel()
        self.webhook_tut.setPixmap(QPixmap.fromImage(self.tut1))
        self.webhook_tut.setGeometry(QtCore.QRect(500, 300, 1280, 880))
        self.webhook_tut2 = QLabel()
        self.webhook_tut2.setPixmap(QPixmap.fromImage(self.tut2))
        self.webhook_tut2.setGeometry(QtCore.QRect(500, 300, 1280, 880))
        self.tut_widget = QtWidgets.QWidget(self.page_4)
        self.sp_layout = QVBoxLayout(self.tut_widget)
        self.title_tut = QLabel()
        self.title_tut.setText("Step 1: Setup Discord Webhook to received Alerts. \nGo to your Discord Server and locate Intergration")
        self.title_tut.setFont(self.font1)
        self.title_tut.setGeometry(QtCore.QRect(500, 50, 1280, 50))
        self.title_tut.setAlignment(QtCore.Qt.AlignCenter)
        self.title2_tut = QLabel()
        self.title2_tut.setText('<a href="https://support.discord.com/hc/en-us/articles/228383668-Intro-to-Webhooks">Reference URL</a>')
        self.title2_tut.setFont(self.font1)
        self.title2_tut.setGeometry(QtCore.QRect(500, 50, 1280, 50))
        self.title2_tut.setAlignment(QtCore.Qt.AlignCenter)
        self.step2_tut = QLabel()
        self.step2_tut.setText("Step 2: Copy Webhook URL and Go to Profile Tab in the Application")
        self.step2_tut.setFont(self.font1)
        self.step2_tut.setGeometry(QtCore.QRect(500, 50, 1280, 50))
        self.step2_tut.setAlignment(QtCore.Qt.AlignCenter)
        self.step2_tut.setOpenExternalLinks(True)
        self.step3_tut = QLabel()
        self.step3_tut.setText("Step 3: Locate Discord Webhook and Paste your webhook in.\n Click Save and Test to check whether the webhook received")
        self.step3_tut.setFont(self.font1)
        self.step3_tut.setGeometry(QtCore.QRect(500, 50, 1280, 50))
        self.step3_tut.setAlignment(QtCore.Qt.AlignCenter)
        self.step4_tut = QLabel()
        self.step4_tut.setText("Step 4: Check on your Discord to see if there is message sent to the specified channel.\n If done correctly, it should show something like this\n If you made it this far, you have successfully connected your Discord Webhook.\n Any Alert will be sent through this webhook")
        self.step4_tut.setFont(self.font1)
        self.step4_tut.setGeometry(QtCore.QRect(500, 50, 1280, 50))
        self.step4_tut.setAlignment(QtCore.Qt.AlignCenter)
        self.step0_tut = QLabel()
        self.step0_tut.setText("How to Set up Discord Webhook for Alert")
        self.step0_tut.setFont(self.fontL)
        self.step0_tut.setGeometry(QtCore.QRect(500, 50, 1280, 50))
        self.step0_tut.setAlignment(QtCore.Qt.AlignCenter)
        self.stepX_tut = QLabel()
        self.stepX_tut.setText("How to Set up Alert Task")
        self.stepX_tut.setFont(self.fontL)
        self.stepX_tut.setGeometry(QtCore.QRect(500, 50, 1280, 50))
        self.stepX_tut.setAlignment(QtCore.Qt.AlignCenter)
        self.webhook_tut3 = QLabel()
        self.webhook_tut3.setPixmap(QPixmap.fromImage(self.tut3))
        self.webhook_tut3.setGeometry(QtCore.QRect(500, 300, 1280, 880))
        self.webhook_tut3.setAlignment(QtCore.Qt.AlignCenter)
        self.webhook_tut4 = QLabel()
        self.webhook_tut4.setPixmap(QPixmap.fromImage(self.tut4))
        self.webhook_tut4.setGeometry(QtCore.QRect(500, 300, 1280, 880))
        self.webhook_tut4.setAlignment(QtCore.Qt.AlignCenter)
        self.taskI1 = QImage('sources/task_creation.png')
        self.task1_tut = QLabel()
        self.task1_tut.setText("Step 1: Go to Task Tab and locate Create Task Button. Once Clicked, it should have a pop up window\n Project URL : copy the collection URL from OpenSea Website\n Example of the URL: https://opensea.io/collection/doodles-official\n")
        self.task1_tut.setFont(self.font1)
        self.task1_tut.setGeometry(QtCore.QRect(500, 50, 1280, 50))
        self.task1_tut.setAlignment(QtCore.Qt.AlignCenter)
        self.task1_img = QLabel()
        self.task1_img.setPixmap(QPixmap.fromImage(self.taskI1))
        self.task1_img.setGeometry(QtCore.QRect(500, 300, 1280, 880))
        self.task1_img.setAlignment(QtCore.Qt.AlignCenter)
        self.taskI1X = QImage('sources/urlfetch.png')
        self.task1X_img = QLabel()
        self.task1X_img.setPixmap(QPixmap.fromImage(self.taskI1X))
        self.task1X_img.setGeometry(QtCore.QRect(500, 300, 1280, 880))
        self.task1X_img.setAlignment(QtCore.Qt.AlignCenter)
        self.taskI2 = QImage('sources/modes.png')
        self.task2_tut = QLabel()
        self.task2_tut.setText("There are 3 modes, Schedule Mode, Threshold Mode, Rapid Mode")
        self.task2_tut.setFont(self.font1)
        self.task2_tut.setGeometry(QtCore.QRect(500, 50, 1280, 50))
        self.task2_tut.setAlignment(QtCore.Qt.AlignCenter)
        self.task2_img = QLabel()
        self.task2_img.setPixmap(QPixmap.fromImage(self.taskI2))
        self.task2_img.setGeometry(QtCore.QRect(500, 300, 1280, 880))
        self.task2_img.setAlignment(QtCore.Qt.AlignCenter)
        self.taskI3 = QImage('sources/s.png')
        self.task3_tut = QLabel()
        self.task3_tut.setText("Schedule Mode\n Required to Enter Project URL and interval (seconds)\n How it Works: this mode will alert user via Discord every interval regardless of the price changes.\n Utility: Good for user who are familiar with the NFT project, beneficial for aged NFT project\nRecommendation: Interval: 60-100s")
        self.task3_tut.setFont(self.font1)
        self.task3_tut.setGeometry(QtCore.QRect(500, 50, 1280, 50))
        self.task3_tut.setAlignment(QtCore.Qt.AlignCenter)
        self.task3_img = QLabel()
        self.task3_img.setPixmap(QPixmap.fromImage(self.taskI3))
        self.task3_img.setGeometry(QtCore.QRect(500, 300, 1280, 880))
        self.task3_img.setAlignment(QtCore.Qt.AlignCenter)
        self.taskI4 = QImage('sources/tm.png')
        self.task4_tut = QLabel()
        self.task4_tut.setText("Threshold Mode\n Required to Enter Project URL,interval (seconds),minimum and maximum threshold value\n How it Works: this mode will only alert user via Discord every interval if the prices went above maximum or below minimum\n Utility: Good for high demand and volume NFT project\nRecommendation: Interval: 30-100s")
        self.task4_tut.setFont(self.font1)
        self.task4_tut.setGeometry(QtCore.QRect(500, 50, 1280, 50))
        self.task4_tut.setAlignment(QtCore.Qt.AlignCenter)
        self.task4_img = QLabel()
        self.task4_img.setPixmap(QPixmap.fromImage(self.taskI4))
        self.task4_img.setGeometry(QtCore.QRect(500, 300, 1280, 880))
        self.task4_img.setAlignment(QtCore.Qt.AlignCenter)
        self.taskI5 = QImage('sources/r.png')
        self.task5_tut = QLabel()
        self.task5_tut.setText("Rapid Mode\n Required to Enter Project URL,interval (seconds),percentage\n How it Works: this mode will only alert user via Discord every interval if the prices went above or below specific percentage\n Utility: Best used when a new NFT project released\nRecommendation: Percentage: 5%,Interval: 10-100s")
        self.task5_tut.setFont(self.font1)
        self.task5_tut.setGeometry(QtCore.QRect(500, 50, 1280, 50))
        self.task5_tut.setAlignment(QtCore.Qt.AlignCenter)
        self.task5_img = QLabel()
        self.task5_img.setPixmap(QPixmap.fromImage(self.taskI5))
        self.task5_img.setGeometry(QtCore.QRect(500, 300, 1280, 880))
        self.task5_img.setAlignment(QtCore.Qt.AlignCenter)
        self.taskI6 = QImage('sources/dco.png')
        self.task6_tut = QLabel()
        self.task6_tut.setText("First Alert goes off when alert task started")
        self.task6_tut.setFont(self.font1)
        self.task6_tut.setGeometry(QtCore.QRect(500, 50, 1280, 50))
        self.task6_tut.setAlignment(QtCore.Qt.AlignCenter)
        self.task6_img = QLabel()
        self.task6_img.setPixmap(QPixmap.fromImage(self.taskI6))
        self.task6_img.setGeometry(QtCore.QRect(500, 300, 1280, 880))
        self.task6_img.setAlignment(QtCore.Qt.AlignCenter)
        self.taskI7 = QImage('sources/sch.png')
        self.task7_tut = QLabel()
        self.task7_tut.setText("Schedule Mode\n Price Rises: Display current floor price and how many percent rises and previous floor price\n Price No Changes: Display current floor price\n Price Drop: Display current floor price and how many percent drop and previous floor price")
        self.task7_tut.setFont(self.font1)
        self.task7_tut.setGeometry(QtCore.QRect(500, 50, 1280, 50))
        self.task7_tut.setAlignment(QtCore.Qt.AlignCenter)
        self.task7_img = QLabel()
        self.task7_img.setPixmap(QPixmap.fromImage(self.taskI7))
        self.task7_img.setGeometry(QtCore.QRect(500, 300, 1280, 880))
        self.task7_img.setAlignment(QtCore.Qt.AlignCenter)
        self.taskI8 = QImage('sources/rapid.png')
        self.task8_tut = QLabel()
        self.task8_tut.setText("Rapid Mode\n Price Rises: Display current floor price and how many percent rises and previous floor price\n Price Drop: Display current floor price and how many percent drop and previous floor price")
        self.task8_tut.setFont(self.font1)
        self.task8_tut.setGeometry(QtCore.QRect(500, 50, 1280, 50))
        self.task8_tut.setAlignment(QtCore.Qt.AlignCenter)
        self.task8_img = QLabel()
        self.task8_img.setPixmap(QPixmap.fromImage(self.taskI8))
        self.task8_img.setGeometry(QtCore.QRect(500, 300, 1280, 880))
        self.task8_img.setAlignment(QtCore.Qt.AlignCenter)
        self.taskI9 = QImage('sources/thresh.png')
        self.task9_tut = QLabel()
        self.task9_tut.setText("Threshold Mode\n Price Above Threshold: Display current floor price and how many percent rises and previous floor price\n Price below threshold: Display current floor price and how many percent drop and previous floor price")
        self.task9_tut.setFont(self.font1)
        self.task9_tut.setGeometry(QtCore.QRect(500, 50, 1280, 50))
        self.task9_tut.setAlignment(QtCore.Qt.AlignCenter)
        self.task9_img = QLabel()
        self.task9_img.setPixmap(QPixmap.fromImage(self.taskI9))
        self.task9_img.setGeometry(QtCore.QRect(500, 300, 1280, 880))
        self.task9_img.setAlignment(QtCore.Qt.AlignCenter)
        self.taskI10 = QImage('sources/stopclear.png')
        self.task10_tut = QLabel()
        self.task10_tut.setText("Stop Task - Terminate all the task\n Clear Task - Terminate all the task and remove them")
        self.task10_tut.setFont(self.font1)
        self.task10_tut.setGeometry(QtCore.QRect(500, 50, 1280, 50))
        self.task10_tut.setAlignment(QtCore.Qt.AlignCenter)
        self.task10_img = QLabel()
        self.task10_img.setPixmap(QPixmap.fromImage(self.taskI10))
        self.task10_img.setGeometry(QtCore.QRect(500, 300, 1280, 880))
        self.task10_img.setAlignment(QtCore.Qt.AlignCenter)
        self.taskIC = QImage('sources/stopclear.png')
        self.taskC_tut = QLabel()
        self.taskC_tut.setText("Calendar Upcoming Drop")
        self.taskC_tut.setFont(self.fontL)
        self.taskC_tut.setGeometry(QtCore.QRect(500, 50, 1280, 50))
        self.taskC_tut.setAlignment(QtCore.Qt.AlignCenter)
        self.taskIC1 = QImage('sources/cal.png')
        self.taskC1_tut = QLabel()
        self.taskC1_tut.setText("Step 1: Wait till the reload button turn to load\n Once the button turn to Load, click and calendar will be fetched\n Once Loaded, user can click refresh to refetch the calendar\n Note if the reload button doesnt disappear after long time, click it till there there is a notification - Calendar Fetched")
        self.taskC1_tut.setFont(self.font1)
        self.taskC1_tut.setGeometry(QtCore.QRect(500, 50, 1280, 50))
        self.taskC1_tut.setAlignment(QtCore.Qt.AlignCenter)
        self.taskC1_img = QLabel()
        self.taskC1_img.setPixmap(QPixmap.fromImage(self.taskIC1))
        self.taskC1_img.setGeometry(QtCore.QRect(500, 300, 1280, 880))
        self.taskC1_img.setAlignment(QtCore.Qt.AlignCenter)
        self.sp_layout.addWidget(self.step0_tut)
        self.sp_layout.addWidget(self.title_tut)
        self.sp_layout.addWidget(self.title2_tut)
        self.sp_layout.addWidget(self.webhook_tut)
        self.sp_layout.addWidget(self.step2_tut)
        self.sp_layout.addWidget(self.webhook_tut2)
        self.sp_layout.addWidget(self.step3_tut)
        self.sp_layout.addWidget(self.webhook_tut3)
        self.sp_layout.addWidget(self.step4_tut)
        self.sp_layout.addWidget(self.webhook_tut4)
        self.sp_layout.addWidget(self.stepX_tut)
        self.sp_layout.addWidget(self.task1_tut)
        self.sp_layout.addWidget(self.task1_img)
        self.sp_layout.addWidget(self.task1X_img)
        self.sp_layout.addWidget(self.task2_tut)
        self.sp_layout.addWidget(self.task2_img)
        self.sp_layout.addWidget(self.task3_tut)
        self.sp_layout.addWidget(self.task3_img)
        self.sp_layout.addWidget(self.task4_tut)
        self.sp_layout.addWidget(self.task4_img)
        self.sp_layout.addWidget(self.task5_tut)
        self.sp_layout.addWidget(self.task5_img)
        self.sp_layout.addWidget(self.task6_tut)
        self.sp_layout.addWidget(self.task6_img)
        self.sp_layout.addWidget(self.task7_tut)
        self.sp_layout.addWidget(self.task7_img)
        self.sp_layout.addWidget(self.task8_tut)
        self.sp_layout.addWidget(self.task8_img)
        self.sp_layout.addWidget(self.task9_tut)
        self.sp_layout.addWidget(self.task9_img)
        self.sp_layout.addWidget(self.task10_tut)
        self.sp_layout.addWidget(self.task10_img)
        self.sp_layout.addWidget(self.taskC_tut)
        self.sp_layout.addWidget(self.taskC1_tut)
        self.sp_layout.addWidget(self.taskC1_img)
        self.sp_layout.addStretch(1)
        self.sp_layout.setAlignment(QtCore.Qt.AlignCenter)
        self.scroll_s.setWidget(self.tut_widget)
        self.webhook_tut.setAlignment(QtCore.Qt.AlignCenter)
        self.webhook_tut2.setAlignment(QtCore.Qt.AlignCenter)
        self.stackedWidget.addWidget(self.page_4)
        MainWindow.setCentralWidget(self.centralwidget)
        #endofsupportpage
        #dashboard 
        self.page_5 = QtWidgets.QWidget()
        self.page_5.setObjectName("page_5")
        self.frame_title5 = QtWidgets.QFrame(self.page_5)
        self.frame_title5.setGeometry(QtCore.QRect(0, 0, 1600, 35))
        self.frame_title5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_title5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_title.setObjectName("frame_title5")
        self.frame_exit5 = QtWidgets.QPushButton('X')
        self.frame_exit5.setFont(self.fontT)
        self.frame_exit5.clicked.connect(self.exitProgram)
        self.frame_enlarge5 = QtWidgets.QPushButton('o')
        self.frame_enlarge5.setFont(self.fontT)
        self.frame_enlarge5.clicked.connect(self.restoreSize)
        self.frame_min5 = QtWidgets.QPushButton('-')
        self.frame_min5.setFont(self.fontT)
        self.frame_min5.clicked.connect(self.minimizedProgram)
        self.hbox_title5 = QHBoxLayout(self.frame_title5)
        self.hbox_title5.addStretch(1)
        self.hbox_title5.addWidget(self.frame_min5)
        self.hbox_title5.addWidget(self.frame_enlarge5)
        self.hbox_title5.addWidget(self.frame_exit5)
        self.frame_title5.setStyleSheet("background-color: black; color: #bab9b9")
        self.frame_dashboard = QFrame(self.page_5)
        self.frame_dashboard.setStyleSheet("background-image: url(sources/bg2.jpg)")
        self.frame_dashboard.setGeometry(QtCore.QRect(280, 115, 1321, 826))
        self.listWidgetd = QtWidgets.QListWidget(self.page_5)
        self.listWidgetd.setStyleSheet("background-color: rgba(255,255,255,50); color: black")
        self.listWidgetd.setGeometry(QtCore.QRect(350, 175, 1175, 675))
        self.listWidgetd.setObjectName("listWidgetd")
        self.frame_8 = QtWidgets.QFrame(self.page_5)
        self.frame_8.setGeometry(QtCore.QRect(0, 35, 281, 901))
        self.frame_8.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_8.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_8.setObjectName("frame_8")
        self.frame_8.setStyleSheet("background-color: #a76bb5")
        self.uniform_logo_label = QtWidgets.QLabel(self.frame_8)
        self.uniform_logo_label.setGeometry(QtCore.QRect(0, 0, 281, 265))
        self.uniform_logo_label.setAlignment(QtCore.Qt.AlignCenter)
        self.uniform_logo_label.setObjectName("uniform_logo_label")
        self.uniform_logo_label.setStyleSheet("background-color: #7d1b94")
        self.uniform_logo = QtWidgets.QLabel(self.frame_8)
        self.uniform_logo.setGeometry(QtCore.QRect(10, 0, 281, 265))
        self.uniform_logo.setAlignment(QtCore.Qt.AlignCenter)
        self.uniform_logo.setObjectName("uniform_logo")
        self.uniform_logo.setStyleSheet("background-color: #7d1b94")
        self.pixmapS = QPixmap('sources/big_logo.png')
        self.uniform_logo.setPixmap(self.pixmapS)
        self.uniform_logo.resize(256,245)
        self.welcome_text = QLabel(self.frame_8)
        self.welcome_text.setGeometry(QtCore.QRect(0, 250, 281, 111))
        self.welcome_text.setFont(self.font)
        self.welcome_text.setAlignment(QtCore.Qt.AlignCenter)
        self.welcome_text.setText("\n\nWelcome Back, \n"+str(username)+"\n Task Running: 0")
        self.dash_btn1 = QtWidgets.QPushButton(self.frame_8)
        self.dash_btn1.setGeometry(QtCore.QRect(0, 380, 281, 112))
        self.dash_btn1.setFont(self.fontTaskbar)
        self.dash_btn1.setObjectName("dash_btn1")
        self.dash_btn1.clicked.connect(self.DashPage)
        self.dash_btn1.setStyleSheet("background-color: #0836C1; color:#d1d0d0")
        self.dash_btn1.setIcon(QIcon('sources/home.png'))
        self.dash_btn1.setIconSize(QtCore.QSize(50,50))
        self.task_btn4 = QtWidgets.QPushButton(self.frame_8)
        self.task_btn4.setGeometry(QtCore.QRect(0, 492, 281, 91))
        self.task_btn4.setFont(self.fontTaskbar)
        self.task_btn4.setObjectName("task_btn4")
        self.task_btn4.clicked.connect(self.TaskPage)
        self.task_btn4.setStyleSheet("background-color: #2F7AE5; color:#d1d0d0")
        self.task_btn4.setIcon(QIcon('sources/bell.png'))
        self.task_btn4.setIconSize(QtCore.QSize(50,50))
        self.UI_btn4 = QtWidgets.QPushButton(self.frame_8)
        self.UI_btn4.setGeometry(QtCore.QRect(0, 583, 281, 91))
        self.UI_btn4.setFont(self.fontTaskbar)
        self.UI_btn4.setObjectName("UI_btn4")
        self.UI_btn4.clicked.connect(self.UIPage)
        self.UI_btn4.setStyleSheet("background-color: #2F7AE5; color:#d1d0d0")
        self.UI_btn4.setIcon(QIcon('sources/user.png'))
        self.UI_btn4.setIconSize(QtCore.QSize(50,50))
        self.S_btn4 = QtWidgets.QPushButton(self.frame_8)
        self.S_btn4.setGeometry(QtCore.QRect(0, 674, 281, 91))
        self.S_btn4.setFont(self.fontTaskbar)
        self.S_btn4.setObjectName("S_btn4")
        self.S_btn4.clicked.connect(self.CPage)
        self.S_btn4.setStyleSheet("background-color: #2F7AE5; color:#d1d0d0")
        self.S_btn4.setIcon(QIcon('sources/questions.png'))
        self.S_btn4.setIconSize(QtCore.QSize(50,50))
        self.frame_9 = QtWidgets.QFrame(self.page_5)
        self.frame_9.setGeometry(QtCore.QRect(281, 35, 1321, 81))
        self.frame_9.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_9.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_9.setObjectName("frame_9")
        self.frame_9.setStyleSheet("background-color: #7d1b94")
        self.refresh_btn = QtWidgets.QPushButton()
        self.refresh_btn.setGeometry(QtCore.QRect(600,0, 281, 90))
        self.refresh_btn.setStyleSheet("background-color: #571666; color:#d1d0d0")
        self.refresh_btn.setFont(self.font)
        self.refresh_btn.setObjectName("refresh_btn")
        self.refresh_btn.clicked.connect(self.dashboardFetch)
        self.load_btn = QtWidgets.QPushButton()
        self.load_btn.setGeometry(QtCore.QRect(600,0, 281, 90))
        self.load_btn.setStyleSheet("background-color: #571666; color:#d1d0d0")
        self.load_btn.setFont(self.font)
        self.load_btn.setObjectName("load_btn")
        self.load_btn.clicked.connect(self.updateDashboard)
        self.reload_btn = QtWidgets.QPushButton()
        self.reload_btn.setGeometry(QtCore.QRect(600,0, 281, 90))
        self.reload_btn.setStyleSheet("background-color: #571666; color:#d1d0d0")
        self.reload_btn.setFont(self.font)
        self.reload_btn.setObjectName("load_btn")
        self.reload_btn.clicked.connect(self.dashboardFetch)
        self.reload_btn.setText("Reload")
        self.reload_btn.setVisible(False)
        self.upcoming_label = QLabel("Upcoming NFTs")
        self.upcoming_label.setAlignment(QtCore.Qt.AlignCenter)
        self.upcoming_label.setFont(self.font)
        self.upcoming_label.setGeometry(QtCore.QRect(300,0, 281, 90))
        self.upcoming_label.setStyleSheet("background-color: #7d1b94; color:#d1d0d0")
        self.hbox_task1 = QHBoxLayout(self.frame_9)
        self.hbox_task1.addStretch(1)
        self.hbox_task1.addWidget(self.upcoming_label)
        self.hbox_task1.addStretch(1)
        self.hbox_task1.addWidget(self.refresh_btn)
        self.hbox_task1.addWidget(self.reload_btn)
        self.hbox_task1.addWidget(self.load_btn)
        self.frame_notificationD = QLabel(self.page_5)
        self.frame_notificationD.setFont(self.font)
        self.frame_notificationD.setAlignment(QtCore.Qt.AlignCenter)
        self.frame_notificationD.setStyleSheet(
                    "background-color: rgba(255,255,255,100);"
                    "border-top-left-radius :10px;"
                    "border-top-right-radius : 10px; "
                    "border-bottom-left-radius : 10px; "
                    "border-bottom-right-radius : 10px"
                    )
        self.frame_notificationD.setGeometry(QtCore.QRect(1200,780,360,100))
        self.stackedWidget.addWidget(self.page_5)   
        self.logout_btnX = QtWidgets.QPushButton(self.frame_8)
        self.logout_btnX.setGeometry(QtCore.QRect(0, 765, 281, 91))
        self.logout_btnX.setFont(self.fontTaskbar)
        self.logout_btnX.setObjectName("logout_btnX")
        self.logout_btnX.clicked.connect(self.logoutConfirmation)
        self.logout_btnX.setStyleSheet("background-color: #439CEF; color:#d1d0d0") 
        self.logout_btnX.setIcon(QIcon('sources/logout.png'))
        self.logout_btnX.setIconSize(QtCore.QSize(50,50))
        #end of dashboard
        #signuppage
        self.spage = QtWidgets.QWidget()
        self.spage.setObjectName("spage") 
        self.fontT = QtGui.QFont()
        self.fontT.setFamily("Courier")
        self.fontT.setPointSize(50)
        self.fontT.setBold(True)
        self.fontT.setWeight(75)
        self.font1 = QtGui.QFont()
        self.font1.setFamily("Courier")
        self.font1.setPointSize(10)
        self.font1.setBold(True)
        self.font1.setWeight(75)
        self.frame_titles = QtWidgets.QFrame(self.spage)
        self.frame_titles.setGeometry(QtCore.QRect(0, 0, 1600, 35))
        self.frame_titles.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_titles.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_titles.setObjectName("frame_titles")
        self.frame_exitS = QtWidgets.QPushButton('X')
        self.frame_exitS.setFont(self.fontT)
        self.frame_exitS.clicked.connect(self.exitProgram) 
        self.frame_enlargeS = QtWidgets.QPushButton('o')
        self.frame_enlargeS.setFont(self.fontT)
        self.frame_enlargeS.clicked.connect(self.restoreSize)
        self.frame_minS = QtWidgets.QPushButton('-',self)
        self.frame_minS.setFont(self.fontT)
        self.frame_minS.clicked.connect(lambda: self.showMinimized())
        self.hbox_titleS = QHBoxLayout(self.frame_titles)
        self.hbox_titleS.addStretch(1)
        self.hbox_titleS.addWidget(self.frame_minS)
        self.hbox_titleS.addWidget(self.frame_enlargeS)
        self.hbox_titleS.addWidget(self.frame_exitS)
        self.frame_titles.setStyleSheet("background-color: black; color: #bab9b9")
        self.frameS = QtWidgets.QFrame(self.spage)
        self.frameS.setGeometry(QtCore.QRect(-1, 34, 1602, 865))
        self.frameS.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frameS.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frameS.setObjectName("frameS")
        self.frameS.setStyleSheet("background-image: url(sources/bg.jpg)")
        self.frame_titles.setStyleSheet("background-color: black; color: #bab9b9")
        self.frame_homeS = QtWidgets.QFrame(self.spage)
        self.frame_homeS.setGeometry(QtCore.QRect(515, 250, 600, 490))
        self.frame_homeS.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_homeS.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_homeS.setObjectName("frame_homeS")
        self.frame_homeS.setStyleSheet("background-color: rgba(255,255,255,100)")
        self.frame_widgetS = QtWidgets.QFrame(self.spage)
        self.frame_widgetS.setGeometry(QtCore.QRect(515, 250, 600, 490))
        self.frame_widgetS.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_widgetS.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_widgetS.setObjectName("frame_widgetS")
        self.frame_widgetS.setStyleSheet("background-color: transparent")
        blur_effectS = QtWidgets.QGraphicsBlurEffect(blurRadius=10)
        self.frame_homeS.setGraphicsEffect(blur_effectS)
        self.frame_widgetS.setAttribute(QtCore.Qt.WA_TranslucentBackground, True)
        self.frame_homeS.setWindowOpacity(0.5)
        self.label_logoS = QtWidgets.QLabel(self.frame_widgetS)
        self.label_logoS.setGeometry(QtCore.QRect(50, 10, 500, 100))
        self.label_logoS.setAlignment(QtCore.Qt.AlignCenter)
        self.label_logoS.setObjectName("label_logoS")
        self.pixmapS = QPixmap('sources/logo.png')
        self.label_logoS.setPixmap(self.pixmapS)
        self.label_logoS.resize(500,150)
        self.fontS = QtGui.QFont()
        self.fontS.setFamily("Courier")
        self.fontS.setPointSize(15)
        self.fontS.setBold(True)
        self.fontS.setWeight(70)
        self.lineEdit_S = QtWidgets.QLineEdit(self.frame_widgetS)
        self.lineEdit_S.setStyleSheet("background-color: transparent; color:black")
        self.fontdefault = QtGui.QFont()
        self.fontdefault.setFamily("Courier")
        self.fontdefault.setPointSize(10)
        self.fontdefault.setWeight(75)
        self.lineEdit_S.setFont(self.fontS)
        self.lineEdit_S.setGeometry(QtCore.QRect(90, 175, 426, 31))
        self.lineEdit_S.setObjectName("lineEdit_S")
        self.lineEdit_S2 = QtWidgets.QLineEdit(self.frame_widgetS)
        self.lineEdit_S2.setEchoMode(QtWidgets.QLineEdit.Password)
        self.lineEdit_S2.setFont(self.fontS)
        self.lineEdit_S2.setGeometry(QtCore.QRect(90, 250, 426, 31))
        self.lineEdit_S2.setText("")
        self.lineEdit_S2.setObjectName("lineEdit_S2")
        self.lineEdit_S2.setStyleSheet("background-color: transparent; color:black")
        self.lineEdit_S3 = QtWidgets.QLineEdit(self.frame_widgetS)
        self.lineEdit_S3.setEchoMode(QtWidgets.QLineEdit.Password)
        self.lineEdit_S3.setFont(self.fontS)
        self.lineEdit_S3.setGeometry(QtCore.QRect(90, 325, 426, 31))
        self.lineEdit_S3.setText("")
        self.lineEdit_S3.setObjectName("lineEdit_S3")
        self.lineEdit_S3.setStyleSheet("background-color: transparent; color:black")
        self.font = QtGui.QFont()
        self.font.setFamily("Courier")
        self.font.setPointSize(15)
        self.font.setBold(True)
        self.font.setWeight(75)
        self.label_S = QtWidgets.QLabel(self.frame_widgetS)
        self.label_S.setGeometry(QtCore.QRect(190, 150, 221, 20))
        self.label_S.setFont(self.font)
        self.label_S.setAlignment(QtCore.Qt.AlignCenter)
        self.label_S.setObjectName("label_S")
        self.label_S2 = QtWidgets.QLabel(self.frame_widgetS)
        self.label_S2.setGeometry(QtCore.QRect(190, 225, 221, 20))
        self.label_S2.setFont(self.font)
        self.label_S2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_S2.setObjectName("label_S2")
        self.label_S3 = QtWidgets.QLabel(self.frame_widgetS)
        self.label_S3.setGeometry(QtCore.QRect(190, 300, 221, 20))
        self.label_S3.setFont(self.font)
        self.label_S3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_S3.setObjectName("label_S3")
        self.SignUpPage_btn = QtWidgets.QPushButton(self.frame_widgetS)
        self.SignUpPage_btn.setGeometry(QtCore.QRect(230, 390, 150, 31))
        self.SignUpPage_btn.setStyleSheet("background-color: #181414; color:#d1d0d0")
        self.SignUpPage_btn.setFont(self.font)
        self.SignUpPage_btn.setObjectName("SignUpPage_btn")
        self.SignUpPage_btn.clicked.connect(self.registerValidation)
        self.goback_btn = QtWidgets.QPushButton(self.frame_widgetS)
        self.goback_btn.setGeometry(QtCore.QRect(230, 430, 150, 31))
        self.goback_btn.setStyleSheet("background-color: #181414; color:#d1d0d0")
        self.goback_btn.setFont(self.font)
        self.goback_btn.setObjectName("goback_btn")
        self.goback_btn.clicked.connect(self.LoginPage)
        self.frame_notificationS = QLabel(self.spage)
        self.frame_notificationS.setFont(self.font)
        self.frame_notificationS.setAlignment(QtCore.Qt.AlignCenter)
        self.frame_notificationS.setStyleSheet(
                    "background-color: rgba(255,255,255,100);"
                    "border-top-left-radius :10px;"
                    "border-top-right-radius : 10px; "
                    "border-bottom-left-radius : 10px; "
                    "border-bottom-right-radius : 10px"
                    )
        self.frame_notificationS.setGeometry(QtCore.QRect(1200,780,360,100))
        self.frame_notificationS.hide()
        self.stackedWidget.addWidget(self.spage)
        #endofsingup

        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Price Alert Application"))
        self.email_label.setText(_translate("MainWindow", "Email"))
        self.pw_label.setText(_translate("MainWindow", "Password"))
        self.pushButton_r.setText(_translate("MainWindow", "Sign Up"))
        self.SignUpPage_btn.setText(_translate("MainWindow", "Register"))
        self.goback_btn.setText(_translate("MainWindow", "Back"))
        self.label_S.setText(_translate("MainWindow", "Email"))
        self.label_S2.setText(_translate("MainWindow", "Password"))
        self.label_S3.setText(_translate("MainWindow", "Confirm Password"))
        self.pushButton_3.setText(_translate("MainWindow", "Login"))
        self.task_btn1.setText(_translate("MainWindow", "Task"))
        self.UI_btn1.setText(_translate("MainWindow", "Profile"))
        self.S_btn1.setText(_translate("MainWindow", "Support"))
        self.logout_btn1.setText(_translate("MainWindow", "Logout"))
        self.stopAll_btn.setText(_translate("MainWindow", "! Stop Task"))
        self.clear_btn.setText(_translate("MainWindow", "- Clear Task"))
        self.create_btn.setText(_translate("MainWindow", "+ Create Task"))
        self.task_btn2.setText(_translate("MainWindow", "Task"))
        self.UI_btn2.setText(_translate("MainWindow", "Profile"))
        self.S_btn2.setText(_translate("MainWindow", "Support"))
        self.logout_btn2.setText(_translate("MainWindow", "Logout"))
        self.label_31.setText(_translate("MainWindow", "Email"))
        self.task_btn3.setText(_translate("MainWindow", "Task"))
        self.UI_btn3.setText(_translate("MainWindow", "Profile"))
        self.S_btn3.setText(_translate("MainWindow", "Support"))
        self.dash_btn.setText(_translate("MainWindow", "Dashboard"))
        self.logout_btn3.setText(_translate("MainWindow", "Logout"))
        self.label_27.setText(_translate("MainWindow", "Discord Webhook"))
        self.pushButton_4.setText(_translate("MainWindow", "Save"))
        self.pushButton_test.setText(_translate("MainWindow", "Test"))
        self.refresh_btn.setText(_translate("MainWindow", "Refresh"))
        self.load_btn.setText(_translate("MainWindow", "Load"))
        self.task_btn4.setText(_translate("MainWindow", "Task"))
        self.S_btn4.setText(_translate("MainWindow", "Support"))
        self.UI_btn4.setText(_translate("MainWindow", "Profile"))
        self.logout_btnX.setText(_translate("MainWindow", "Logout"))
        self.dash_btn1.setText(_translate("MainWindow", "Dashboard"))
        self.dash_btn2.setText(_translate("MainWindow", "Dashboard"))
        self.dash_btn3.setText(_translate("MainWindow", "Dashboard"))
    def restoreSize(self):
        global WINDOW_SIZE
        win_status = WINDOW_SIZE
        if win_status == 0:
            WINDOW_SIZE = 1
            self.showMaximized()
        else:
            WINDOW_SIZE = 0
            self.showNormal()

    def mousePressEvent(self, event):
        self.oldPosition = event.globalPos()

    def mouseMoveEvent(self, event):
        delta = QPoint (event.globalPos() - self.oldPosition)
        self.move(self.x() + delta.x(), self.y() + delta.y())
        self.oldPosition = event.globalPos()
    def minimizedProgram(self):
        self.showMinimized()
        
    def maximizedProgram(self):
        self.showFullScreen()
    

    def username_modification(self):
        username_saved = str(self.username_input.text())
        if username_saved != con['username'] and username_saved != "":
            con['username'] = username_saved
            setting = open("config.json","w")
            json.dump(con,setting)
            setting.close()
            self.frame_notificationC
            self.frame_notificationC.setText("UserName Saved")
            self.pushButton_4.setText("Saved")
            self.frame_notificationC.show()
            QtTest.QTest.qWait(1000)
            self.pushButton_4.setText("Save")
            self.frame_notificationC.hide()
        elif username_saved == "":
            self.username_input.setText(username)
            self.frame_notificationC.setText("UserName Invalid")
            self.frame_notificationC.show()
            QtTest.QTest.qWait(1000)
            self.frame_notificationC.hide()

    def webhook_modification(self):
        self.pushButton_4.setDisabled(True)
        self.pushButton_4.setDisabled(False)
        dc_input = str(self.lineEdit_10.text())
        dc_validation = dc_input.startswith('https://discord.com/api/webhooks/')
        if dc_validation == True:
            con['discord_webhook'] = dc_input
            setting = open("config.json","w")
            json.dump(con,setting)
            setting.close()
            self.frame_notificationC.setText("Webhook Succesfully Updated")
            self.pushButton_4.setText("Saved")
            self.frame_notificationC.show()
            QtTest.QTest.qWait(1000)
            self.pushButton_4.setText("Save")
            self.frame_notificationC.hide()
        elif dc_validation == False:
            self.lineEdit_10.setText(discord_webhook)
            self.frame_notificationC.setText("Invalid Discord Webhook")
            self.frame_notificationC.show()
            QtTest.QTest.qWait(2000)
            self.frame_notificationC.hide()

    def webhook_test(self):
        if self.lineEdit_10.text().startswith('https://discord.com/api/webhooks/') == True:
            self.frame_notificationC.setText("Webhook Succesfully Sent")
            self.frame_notificationC.show()
            QtTest.QTest.qWait(2000)
            self.frame_notificationC.hide()
            webhook = DiscordWebhook(url=self.lineEdit_10.text() ,username = "NFT Price Alert Bot")
            embed=DiscordEmbed(title="**Webhook Successfully Set Up**", description="Webhook Testing")
            embed.add_embed_field(name = "Floor Price", value = "N/A")
            webhook.add_embed(embed)
            response = webhook.execute()

        elif self.lineEdit_10.text().startswith('https://discord.com/api/webhooks/') == False:
            self.frame_notificationC.setText("Webhook Invalid")
            self.frame_notificationC.show()
            QtTest.QTest.qWait(2000)
            self.frame_notificationC.hide()

    def LoginPage(self):
        self.stackedWidget.setCurrentIndex(0)

    def SignUpPage(self):
        self.stackedWidget.setCurrentIndex(5)

    def TaskPage(self):
        self.stackedWidget.setCurrentIndex(1)

    def UIPage(self):
        self.stackedWidget.setCurrentIndex(2)

    def CPage(self):
        self.stackedWidget.setCurrentIndex(3)

    def DashPage(self):
        self.stackedWidget.setCurrentIndex(4)

    def checkEmail(self,email):
        try:
            v = validate_email(email)
            email = v["email"]
            self.emailValidation = True
        except EmailNotValidError as e: 
            self.emailValidation = False
        return self.emailValidation

    def registerValidation(self):
        global email 
        email_input = str(self.lineEdit_S.text())
        self.checkEmail(email_input)
        email = self.lineEdit_S.text()
        if self.lineEdit_S2.text() == self.lineEdit_S3.text() and self.emailValidation == True and len(self.lineEdit_S2.text()) > 5:
            password = self.lineEdit_S2.text()
            try:
                auth.create_user_with_email_and_password(email,password)
                self.frame_notificationS.setText("Register Successfully")
                self.frame_notificationS.show()
                QtTest.QTest.qWait(500)
                self.frame_notificationS.hide()
                self.stackedWidget.setCurrentIndex(0)
            except:
                self.frame_notificationS.setText("Register Unsuccessfully")
                self.frame_notificationS.show()
                QtTest.QTest.qWait(500)
                self.frame_notificationS.hide()
        elif self.lineEdit_S2.text() != self.lineEdit_S3.text():
                self.frame_notificationS.setText("Password does not Match")
                self.frame_notificationS.show()
                QtTest.QTest.qWait(500)
                self.frame_notificationS.hide()
        
    def LoginValidation(self):
        email_fb = self.email_login.text()
        pw_fb = self.pw_login.text()
        if len(self.pw_login.text()) > 5:
            try:
                auth.sign_in_with_email_and_password(email_fb,pw_fb)
                self.lineEdit_8.setText(self.email_login.text())
                self.frame_notificationL.setText("Login Successfully")
                self.frame_notificationL.show()
                QtTest.QTest.qWait(500)
                self.frame_notificationL.hide()
                self.stackedWidget.setCurrentIndex(4)                      
            except:
                self.frame_notificationL.setText("Credentials Incorrect")
                self.frame_notificationL.show()
                QtTest.QTest.qWait(500)
                self.frame_notificationL.hide()
                
        else:
            self.frame_notificationL.setText("Login Failed")
            self.frame_notificationL.show()
            QtTest.QTest.qWait(500)
            self.frame_notificationL.hide()

    def exitProgram(self):
        ExitBox = QDialog()
        ExitBox.setFixedSize(660,140)
        ExitBox.setWindowFlags(Qt.FramelessWindowHint)
        ExitBox.setStyleSheet("background-color: #7d1b94; color: black")
        confirmation1 = QLabel(ExitBox)
        confirmation1.setText("Exit the Application?")
        confirmation1.setAlignment(QtCore.Qt.AlignCenter)
        confirmation1.setGeometry(QtCore.QRect(0, 0, 600, 50))
        confirmation1.setFont(self.fontL)
        okBtn1 = QPushButton(ExitBox)
        okBtn1.setText("Yes")
        okBtn1.setFont(self.font1)
        okBtn1.setStyleSheet("background-color: #571666; color:#d1d0d0")
        okBtn1.setGeometry(QtCore.QRect(10, 80, 300, 50))
        DeniedBtn = QPushButton(ExitBox)
        DeniedBtn.setText("No")
        DeniedBtn.setFont(self.font1)
        DeniedBtn.setStyleSheet("background-color: #571666; color:#d1d0d0")
        DeniedBtn.setGeometry(QtCore.QRect(350, 80, 300, 50)) 
        okBtn1.clicked.connect(self.removeAll)
        okBtn1.clicked.connect(QCoreApplication.instance().quit)    
        DeniedBtn.clicked.connect(lambda:ExitBox.close())
        ExitBox.exec_()

    def logoutConfirmation(self):
        logoutBox = QDialog()
        logoutBox.setStyleSheet("background-color: #7d1b94; color: black")
        logoutBox.setFixedSize(660,140)
        logoutBox.setWindowFlags(Qt.FramelessWindowHint)
        confirmation = QLabel(logoutBox)
        confirmation.setAlignment(QtCore.Qt.AlignCenter)
        confirmation.setText("Are you sure you want to log out?")
        confirmation.setGeometry(QtCore.QRect(0, 0, 600, 50))
        confirmation.setFont(self.fontL)
        okBtn = QPushButton(logoutBox)
        okBtn.setFont(self.font1)
        okBtn.setText("Log Out")
        okBtn.setStyleSheet("background-color: #571666; color:#d1d0d0")
        okBtn.setGeometry(QtCore.QRect(10, 80, 300, 50))
        cancelBtn = QPushButton(logoutBox)
        cancelBtn.setText("Cancel")
        cancelBtn.setFont(self.font1)
        cancelBtn.setGeometry(QtCore.QRect(350, 80, 300, 50)) 
        cancelBtn.setStyleSheet("background-color: #571666; color:#d1d0d0") 
        okBtn.clicked.connect(self.removeAll)
        okBtn.clicked.connect(self.logout) 
        okBtn.clicked.connect(lambda:logoutBox.close())      
        cancelBtn.clicked.connect(lambda:logoutBox.close())
        logoutBox.exec_()

    def logout(self):
        self.stackedWidget.setCurrentIndex(0)
        self.email_login.clear()
        self.pw_login.clear()
  
    def createTask(self):
        self.msgBox = QDialog()
        self.frame_titleCT = QtWidgets.QFrame(self.msgBox)
        self.frame_titleCT.setGeometry(QtCore.QRect(0, 0, 600, 50))
        self.frame_titleCT.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_titleCT.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_titleCT.setObjectName("frame_titleCT")
        self.frame_exitCT = QtWidgets.QPushButton('X')
        self.frame_exitCT.setFont(self.fontT)
        self.frame_exitCT.clicked.connect(lambda: self.msgBox.close()) 
        self.frame_titleCT.setStyleSheet("background-color: transparent")
        self.frame_exitCT.setStyleSheet("background-color: transparent")
        self.alertTitle = QLabel("Alert Creation")
        self.alertTitle.setFont(self.fontT)
        hboxCT = QHBoxLayout(self.frame_titleCT)
        hboxCT.addStretch(1)
        hboxCT.addWidget(self.alertTitle)
        hboxCT.addStretch(1)
        hboxCT.addWidget(self.frame_exitCT)
        self.msgBox.setStyleSheet("background-color: #7d1b94; color: black")
        self.msgBox.setFixedSize(600,430)
        self.msgBox.setWindowFlags(Qt.FramelessWindowHint)
        self.project_input = QLineEdit(self.msgBox)
        self.project_split = []
        self.projecttitle = QLabel(self.msgBox)
        self.intervalinput = QLabel(self.msgBox)
        self.threshminlabel = QLabel(self.msgBox)
        self.threshmaxlabel = QLabel(self.msgBox)
        self.interval_input = QLineEdit(self.msgBox)
        self.perc_input = QLineEdit(self.msgBox)
        self.mode_input = QComboBox(self.msgBox)
        self.threshmin = QLineEdit(self.msgBox)
        self.threshmax = QLineEdit(self.msgBox)
        self.mode_input.addItem('Schedule Mode')
        self.mode_input.addItem('Threshold Mode')
        self.mode_input.addItem('Rapid Mode')
        self.perctitle = QLabel(self.msgBox)
        self.alertMode = QLabel(self.msgBox)
        self.startBtn = QPushButton(self.msgBox)
        self.startBtn.setText("Start Alert")
        self.startBtn.setFont(self.font1)
        self.startBtn.setGeometry(QtCore.QRect(250, 360, 300, 50))
        self.startBtn.setStyleSheet("background-color: #571666; color:#d1d0d0")
        self.alertMode.setText("Alert Mode")
        self.alertMode.setGeometry(QtCore.QRect(20, 60, 200, 50))
        self.alertMode.setFont(self.font1)
        self.mode_input.setGeometry(QtCore.QRect(250, 60, 300, 50))
        self.mode_input.setFont(self.font1)
        self.mode_input.setStyleSheet("background-color: white")
        self.projecttitle.setText("Project URL")
        self.projecttitle.setGeometry(QtCore.QRect(20, 120, 200, 50))
        self.projecttitle.setFont(self.font1)
        self.project_input.setGeometry(QtCore.QRect(250, 120, 300, 50))
        self.project_input.setFont(self.font1)
        self.project_input.setStyleSheet("background-color: white")
        self.intervalinput.setText("Interval")
        self.intervalinput.setGeometry(QtCore.QRect(20, 180, 200, 50))
        self.intervalinput.setFont(self.font1)
        self.interval_input.setGeometry(QtCore.QRect(250, 180, 300, 50))
        self.interval_input.setFont(self.font1)
        self.interval_input.setStyleSheet("background-color: white")
        self.threshminlabel.setText("Min")
        self.threshminlabel.setGeometry(QtCore.QRect(20, 240, 200, 50))
        self.threshminlabel.setFont(self.font1)
        self.threshmin.setGeometry(QtCore.QRect(250, 240, 300, 50))
        self.threshmin.setFont(self.font1)
        self.threshmin.setStyleSheet("background-color: white")
        self.threshmaxlabel.setText("Max")
        self.threshmaxlabel.setGeometry(QtCore.QRect(20, 300, 200, 50))
        self.threshmaxlabel.setFont(self.font1)
        self.threshmax.setGeometry(QtCore.QRect(250, 300, 300, 50))
        self.threshmax.setFont(self.font1)
        self.threshmax.setStyleSheet("background-color: white")
        self.perctitle.setText("Percentage")
        self.perctitle.setGeometry(QtCore.QRect(20, 240, 200, 50))
        self.perctitle.setFont(self.font1)
        self.perc_input.setGeometry(QtCore.QRect(250, 240, 300, 50))
        self.perc_input.setFont(self.font1)
        self.perc_input.setStyleSheet("background-color: white")
        self.perc_input.hide()
        self.perctitle.hide()
        self.threshminlabel.hide()
        self.threshmaxlabel.hide()
        self.threshmin.hide()
        self.threshmax.hide()
        self.startBtn.clicked.connect(self.updateId)
        self.startBtn.clicked.connect(self.updateTask)
        self.mode_input.currentIndexChanged.connect(self.currentIndexChanged)         
        self.msgBox.exec_()
    
    def currentIndexChanged(self, index):
        if self.mode_input.itemText(index) == "Rapid Mode":
            self.perc_input.show()
            self.perctitle.show()
            self.threshmin.hide()
            self.threshmax.hide()
            self.threshminlabel.hide()
            self.threshmaxlabel.hide()

        elif self.mode_input.itemText(index) == "Threshold Mode":
            self.threshmin.show()
            self.threshmax.show()
            self.threshminlabel.show()
            self.threshmaxlabel.show()
            self.perc_input.hide()
            self.perctitle.hide()
        else:
            self.perc_input.hide()
            self.perctitle.hide()
            self.threshmin.hide()
            self.threshmax.hide()
            self.threshminlabel.hide()
            self.threshmaxlabel.hide()

    def updateTask(self):
        if self.project_input.text().startswith('https://opensea.io/collection/') and self.interval_input.text() != "" and self.interval_input.text().isalpha() == False:
            self.fontTask = QtGui.QFont()
            self.fontTask.setFamily("Courier")
            self.fontTask.setPointSize(12)
            self.fontTask.setBold(True)
            self.fontTask.setWeight(75)
            self.task_id = QLabel(str(self.count))
            self.welcome_text.setText("\n\nWelcome Back, \n"+str(username)+"\n Task Running: "+str(self.count))
            self.welcome_textT.setText("\n\nWelcome Back, \n"+str(username)+"\n Task Running: "+str(self.count))
            self.welcome_textI.setText("\n\nWelcome Back, \n"+str(username)+"\n Task Running: "+str(self.count))
            self.welcome_textS.setText("\n\nWelcome Back, \n"+str(username)+"\n Task Running: "+str(self.count))
            self.task_id.setFont(self.fontTask)
            self.task_id.setAlignment(QtCore.Qt.AlignCenter)
            self.item = QtWidgets.QListWidgetItem()
            self.item_layout = QHBoxLayout()
            self.project_split = self.project_input.text().split('/')
            self.task_name = QLabel(str(self.project_split[-1]))
            self.task_name.setFont(self.fontTask)
            self.task_name.setAlignment(QtCore.Qt.AlignCenter)
            self.mode_type = QLabel(str(self.mode_input.currentText()))
            self.mode_type.setFont(self.fontTask)
            self.mode_type.setAlignment(QtCore.Qt.AlignCenter)
            self.delay_list = QLabel(str(self.interval_input.text()))
            self.delay_list.setFont(self.fontTask)
            self.delay_list.setAlignment(QtCore.Qt.AlignCenter)
            self.task_id.setStyleSheet("background-color: transparent; color:#d1d0d0")
            self.task_name.setStyleSheet("background-color: transparent; color:#d1d0d0")
            self.mode_type.setStyleSheet("background-color: transparent; color:#d1d0d0")
            self.delay_list.setStyleSheet("background-color: transparent; color:#d1d0d0")
            self.item_layout.addWidget(self.task_id)
            self.item_layout.addStretch(1)
            self.item_layout.addWidget(self.task_name)
            self.item_layout.addStretch(1)
            self.item_layout.addWidget(self.delay_list)
            self.item_layout.addStretch(1)
            self.item_layout.addWidget(self.mode_type)
            item_widget = QWidget()
            item_widget.setLayout(self.item_layout)
            self.item.setSizeHint(item_widget.sizeHint())
            self.listWidget.addItem(self.item)
            self.listWidget.setItemWidget(self.item,item_widget)
            self.msgBox.close()
            self.modeTask()
            self.task_noti()
        else:
            self.frame_notificationT.setText("Task Error")
            self.frame_notificationT.show()
            QtTest.QTest.qWait(2000)
            self.frame_notificationT.hide()
        
    def task_noti(self):
        self.project_split = self.project_input.text().split('/')
        self.frame_notificationT.setText("Task Started: "+self.project_split[-1])
        self.frame_notificationT.show()
        QtTest.QTest.qWait(2000)
        self.frame_notificationT.hide()

    def modeTask(self):
        if self.mode_input.currentText() == "Rapid Mode":
            self.rapidTask()
        elif self.mode_input.currentText() == "Schedule Mode":
            self.scheduleTask()
        elif self.mode_input.currentText() == "Threshold Mode":
            self.thresholdTask()


    def removeAll(self):  
        self.listWidget.clear()
        active=active_children()
        for child in active:
            child.terminate()
        self.count = 0
        self.welcome_text.setText("\n\nWelcome Back, \n"+str(username)+"\n Task Running: 0")
        self.welcome_textT.setText("\n\nWelcome Back, \n"+str(username)+"\n Task Running: 0")
        self.welcome_textI.setText("\n\nWelcome Back, \n"+str(username)+"\n Task Running: 0")
        self.welcome_textS.setText("\n\nWelcome Back, \n"+str(username)+"\n Task Running: 0")
        self.frame_notificationT.setText("All Tasks Cleared ")
        self.frame_notificationT.show()
        QtTest.QTest.qWait(2000)
        self.frame_notificationT.hide()

    def updateId(self):
        #global count
        self.count = self.count + 1
      
    def rapidTask(self): 
        global project
        global mode 
        global interval
        global percentage
        percentage = self.perc_input.text()
        mode = self.mode_input.currentText()
        interval = self.interval_input.text()
        project = str(self.project_split[-1])
        a = Process(target=rapid_mode, args=(floor,nft_content,nft_image,project,mode,interval,percentage))
        a.start()

    def scheduleTask(self): 
        global project
        global mode 
        global interval
        mode = self.mode_input.currentText()
        interval = self.interval_input.text()
        project = str(self.project_split[-1])
        b = Process(target=schedule_mode, args=(floor,nft_content,nft_image,project,mode,interval))
        b.start()

    def thresholdTask(self): 
        global project
        global mode 
        global threshold_down
        global threshold_up
        global interval
        threshold_down = self.threshmin.text()
        threshold_up = self.threshmax.text()
        mode = self.mode_input.currentText()
        interval = self.interval_input.text()
        project = str(self.project_split[-1])
        c = Process(target=threshold_mode, args=(floor,nft_content,nft_image,project,mode,threshold_up,threshold_down,interval))
        c.start()


    def stopAll(self):
        self.welcome_text.setText("\n\nWelcome Back, \n"+str(username)+"\n Task Running: 0")
        self.welcome_textT.setText("\n\nWelcome Back, \n"+str(username)+"\n Task Running: 0")
        self.welcome_textI.setText("\n\nWelcome Back, \n"+str(username)+"\n Task Running: 0")
        self.welcome_textS.setText("\n\nWelcome Back, \n"+str(username)+"\n Task Running: 0")
        active=active_children()
        child_count = 0
        for child in active:
            child.terminate()
            child_count = child_count + 1
        self.frame_notificationT.setText(str(child_count) +" Tasks Stopped")
        self.frame_notificationT.show()
        QtTest.QTest.qWait(2000)
        self.frame_notificationT.hide()

    def dashboardFetch(self):
        p1 = Thread(target=self.calendarToday)
        p1.start()

    def calendarToday(self):
        self.frame_notificationD.setText("Fetching Calendar ...")
        self.frame_notificationD.show()
        self.load_btn.setVisible(False)
        self.refresh_btn.setVisible(False)
        self.listWidgetd.clear()
        ua = UserAgent(verify_ssl=False)
        options = Options()
        options.add_argument('--headless')
        options.add_argument('--disable-gpu')
        options.add_argument(f'user-agent={ua.random}')
        service = Service(ChromeDriverManager().install())
        service.creationflags = CREATE_NO_WINDOW
        driver2 = webdriver.Chrome(service=service, options=options)
        wait = WebDriverWait(driver2,60)
        self.looping_input = 1
        self.looping_inputList = []
        self.title_nft = []
        self.embed_sources_text = []
        self.embed_link = []
        self.image_link = []
        for looping in range(20):
            self.looping_inputList.append(self.looping_input)
            driver2.get("https://nftcalendar.io/b/ethereum/")
            self.reload_btn.setVisible(True)
            w_load = wait.until(EC.presence_of_element_located((By.XPATH,"/html/body/section/div/div[1]/div/div/div[2]/div["+str(self.looping_input)+"]/div[2]/a/h2")))
            w = driver2.find_element(By.XPATH, "/html/body/section/div/div[1]/div/div/div[2]/div["+str(self.looping_input)+"]/div[2]/a")
            link_url = w.get_attribute("href")
            driver2.get(w.get_attribute("href"))
            self.embed_link.append(link_url)
            nft = driver2.find_element(By.XPATH, "/html/body/section/div/div[1]/div[1]/h1")
            image_calendar = driver2.find_element(By.XPATH, "/html/body/section/div/div[1]/div[1]/img")
            image_src = image_calendar.get_attribute("src")
            self.title_nft.append(nft.text)
            embed_sources = driver2.find_element(By.XPATH, "/html/body/section/div/div[1]/div[1]/div[1]/div[2]") 
            date_text = embed_sources.text.replace("November", "Nov")
            date_text = date_text.replace("2022", "")
            date_text = date_text.replace(",", "")
            self.image_link.append(image_src)
            self.embed_sources_text.append(date_text)
            self.looping_input = self.looping_input + 1
        self.reload_btn.setVisible(False)
        QtTest.QTest.qWait(1000)
        self.frame_notificationD.hide()
        self.load_btn.setVisible(True)
        driver2.close()
        self.frame_notificationD.setText("Calendar Fetched")
        self.frame_notificationD.show()
        QtTest.QTest.qWait(2000)
        self.frame_notificationD.hide()
    def updateDashboard(self):
        self.load_btn.setVisible(False)
        for i in range(20):
            self.dash_id = QLabel(str(self.looping_inputList[i]))
            self.dash_id.setFont(self.font1)
            self.dash_id.setAlignment(QtCore.Qt.AlignLeft)
            self.dash_id.setStyleSheet("background-color: transparent; color:#d1d0d0")
            self.itemd = QtWidgets.QListWidgetItem()
            self.item_layoutd = QHBoxLayout()
            self.dash_name = QLabel(self.title_nft[i])
            self.dash_name.setFont(self.font1)
            self.dash_name.setAlignment(QtCore.Qt.AlignCenter)
            self.dash_name.setStyleSheet("background-color: transparent; color:#d1d0d0")
            self.dash_date = QLabel("          "+self.embed_sources_text[i])
            self.dash_date.setFont(self.font1)
            self.dash_date.setAlignment(QtCore.Qt.AlignLeft)
            self.dash_date.setStyleSheet("background-color: transparent; color:#d1d0d0")
            url_link2 = ('<a href="'+str(self.embed_link[i])+'">URL</a>')
            self.dash_link = QLabel(url_link2)
            self.dash_link.setTextInteractionFlags(Qt.LinksAccessibleByMouse)
            self.dash_link.setTextInteractionFlags(Qt.TextBrowserInteraction)
            self.dash_link.setTextFormat(Qt.RichText)
            self.dash_link.setOpenExternalLinks(True)   
            self.dash_link.setFont(self.font1)
            self.dash_link.setAlignment(QtCore.Qt.AlignRight)
            self.dash_link.setStyleSheet("background-color: transparent; color:#d1d0d0")
            self.item_layoutd.addWidget(self.dash_id)
            #self.item_layoutd.addStretch(1)
            self.item_layoutd.addWidget(self.dash_name)
            #self.item_layoutd.addStretch(1)
            self.item_layoutd.addWidget(self.dash_link)
            #self.item_layoutd.addStretch(1)
            self.item_layoutd.addWidget(self.dash_date)
            item_widgetd = QWidget()
            item_widgetd.setLayout(self.item_layoutd)
            self.itemd.setSizeHint(item_widgetd.sizeHint())
            self.listWidgetd.addItem(self.itemd)
            self.listWidgetd.setItemWidget(self.itemd,item_widgetd)
        self.looping_inputList.clear()
        self.looping_input = 1
        self.title_nft.clear()
        self.refresh_btn.setVisible(True)
        self.frame_notificationD.setText("Calendar Loaded")
        self.frame_notificationD.show()
        QtTest.QTest.qWait(500)
        self.frame_notificationD.hide()
def calculatePercentage(f1,f2):
    percentCalc = (abs(f1-f2)/f2)*100
    return percentCalc

def priceDropAlert(discord_webhook, name, image, c_floor, p_floor, p, l,mode):
    webhook = DiscordWebhook(url=discord_webhook ,username = "NFT Price Alert Bot")         
    embed=DiscordEmbed(title="**"+str(name)+"**\n**"+str(round(c_floor,4))+"Ξ**", description=":small_red_triangle_down: **PRICE DROPS**", color =0xe74c3c)
    embed.set_thumbnail(url = image)
    embed.add_embed_field(name = "**Previous Floor **", value = (str(round(p_floor,4))+"**Ξ **"),inline = True)
    embed.add_embed_field(name = "**Price Drop Percentage**", value = str(round(p,2))+"%",inline = False)
    embed.add_embed_field(name = "**NFT Link **",value = "||" +str(l)+"||",inline = False)
    embed.add_embed_field(name="**Mode **",value =  str(mode), inline = True)
    webhook.add_embed(embed)
    response = webhook.execute()

def priceRiseAlert(discord_webhook, name, image, c_floor, p_floor, p, l,mode):
    webhook = DiscordWebhook(url=discord_webhook ,username = "NFT Price Alert Bot")         
    embed=DiscordEmbed(title="**"+str(name)+"**\n**"+str(round(c_floor,4))+"Ξ**", description=":green_circle: **PRICE RISES**", color =0x2ecc71)
    embed.set_thumbnail(url = image)
    embed.add_embed_field(name = "**Previous Floor **", value = (str(round(p_floor,4))+"**Ξ **"),inline = True)
    embed.add_embed_field(name = "**Price Rises Percentage**", value = str(round(p,2))+"%",inline = False)
    embed.add_embed_field(name = "**NFT Link **",value = "||" +str(l)+"||",inline = False)
    embed.add_embed_field(name="**Mode **",value =  str(mode), inline = True)
    webhook.add_embed(embed)
    response = webhook.execute()

def startAlert(discord_webhook, name, image, c_floor, l,mode):
    webhook = DiscordWebhook(url=discord_webhook ,username = "NFT Price Alert Bot")
    embed=DiscordEmbed(title="**"+str(name)+"**\n**"+str(round(c_floor,4))+"Ξ**", description=":alarm_clock: **TASK STARTED**", color= 0xf1c40f)
    embed.set_thumbnail(url = image)
    embed.add_embed_field(name = "**Previous Floor **", value = "N/A", inline = True)
    embed.add_embed_field(name="**NFT Link **",value = "||" +str(l)+"||", inline = False)
    embed.add_embed_field(name="**Mode **",value =  str(mode), inline = True)
    webhook.add_embed(embed)
    response = webhook.execute()

def startAlertTM(discord_webhook, name, image, c_floor, l,mode,threshold_up,threshold_down):
    webhook = DiscordWebhook(url=discord_webhook ,username = "NFT Price Alert Bot")
    embed=DiscordEmbed(title="**"+str(name)+"**\n**"+str(round(c_floor,4))+"Ξ**", description=":alarm_clock: **TASK STARTED**", color= 0xf1c40f)
    embed.set_thumbnail(url = image)
    embed.add_embed_field(name = "**Previous Floor **", value = "N/A", inline = True)
    embed.add_embed_field(name="**NFT Link **",value = "||" +str(l)+"||", inline = False)
    embed.add_embed_field(name="**Mode **",value =  str(mode), inline = False)
    #embed.add_embed_field(name="**Threshold Value **",value =  "<"+str(threshold_down)+"\n>"+str(threshold_up), inline = False)
    webhook.add_embed(embed)
    response = webhook.execute()

def priceDropAlertTM(discord_webhook, name, image, c_floor, p_floor, p, l,mode,threshold_down):
    webhook = DiscordWebhook(url=discord_webhook ,username = "NFT Price Alert Bot")         
    embed=DiscordEmbed(title="**"+str(name)+"**\n**"+str(round(c_floor,4))+"Ξ**", description=":small_red_triangle_down: **BELOW THRESHOLD** ", color =0xe74c3c)
    embed.set_thumbnail(url = image)
    embed.add_embed_field(name = "**Previous Floor **", value = (str(round(p_floor,4))+"**Ξ **"),inline = True)
    embed.add_embed_field(name = "**Price Drop Percentage**", value = str(round(p,2))+"%",inline = False)
    embed.add_embed_field(name = "**NFT Link **",value = "||" +str(l)+"||",inline = False)
    embed.add_embed_field(name="**Mode **",value =  str(mode), inline = True)
    #embed.add_embed_field(name="**Threshold Value **",value =  "< "+str(threshold_down), inline = False)
    webhook.add_embed(embed)
    response = webhook.execute()

def priceRiseAlertTM(discord_webhook, name, image, c_floor, p_floor, p, l,mode,threshold_up):
    webhook = DiscordWebhook(url=discord_webhook ,username = "NFT Price Alert Bot")         
    embed=DiscordEmbed(title="**"+str(name)+"**\n**"+str(round(c_floor,4))+"Ξ**", description=":green_circle: **ABOVE THRESHOLD** ", color =0x2ecc71)
    embed.set_thumbnail(url = image)
    embed.add_embed_field(name = "**Previous Floor **", value = (str(round(p_floor,4))+"**Ξ **"),inline = True)
    embed.add_embed_field(name = "**Price Rises Percentage**", value = str(round(p,2))+"%",inline = False)
    embed.add_embed_field(name = "**NFT Link **",value = "||" +str(l)+"||",inline = False)
    embed.add_embed_field(name="**Mode **",value =  str(mode), inline = True)
    #embed.add_embed_field(name="**Threshold Value **",value =  "> "+str(threshold_up), inline = False)
    webhook.add_embed(embed)
    response = webhook.execute()

def startAlertSM(discord_webhook, name, image, c_floor, l,mode):
    webhook = DiscordWebhook(url=discord_webhook ,username = "NFT Price Alert Bot")
    embed=DiscordEmbed(title="**"+str(name)+"**\n**"+str(round(c_floor,4))+"Ξ**", description=":alarm_clock: **TASK STARTED**", color= 0xf1c40f)
    embed.set_thumbnail(url = image)
    embed.add_embed_field(name = "**Previous Floor **", value = "N/A", inline = True)
    embed.add_embed_field(name="**NFT Link **",value = "||" +str(l)+"||", inline = False)
    embed.add_embed_field(name="**Mode **",value =  str(mode), inline = False)
    webhook.add_embed(embed)
    response = webhook.execute()

def priceAlertSM(discord_webhook, name, image, c_floor, p_floor, p, l,mode,priceStatus,color_code,name_PF,name_p):
    webhook = DiscordWebhook(url=discord_webhook ,username = "NFT Price Alert Bot")         
    embed=DiscordEmbed(title="**"+str(name)+"**\n**"+str(round(c_floor,4))+"Ξ**", description=str(priceStatus), color =str(color_code))
    embed.set_thumbnail(url = image)
    if name_p != "N/A":
        embed.add_embed_field(name = str(name_PF), value = (str(round(p_floor,4))+"**Ξ **"),inline = True)
        embed.add_embed_field(name = str(name_p), value = str(round(p,2))+"%",inline = False)
    embed.add_embed_field(name = "**NFT Link **",value = "||" +str(l)+"||",inline = False)
    embed.add_embed_field(name="**Mode **",value =  str(mode), inline = True)
    webhook.add_embed(embed)
    response = webhook.execute()

def threshold_mode(floor,nft_content,nft_image,project,mode,threshold_up,threshold_down,interval):
    mode = "Threshold Mode" 
    print('Starting Task')
    ua = UserAgent()
    options = Options()
    options.add_argument('--headless')
    options.add_argument('--disable-gpu')
    options.add_argument(f'user-agent={ua.random}')
    service = Service(ChromeDriverManager().install())
    service.creationflags = CREATE_NO_WINDOW
    driver = webdriver.Chrome(service=service, options=options)
    wait = WebDriverWait(driver,60)
    driver.get("https://opensea.io/collection/"+str(project))
    w_load = wait.until(EC.presence_of_element_located((By.TAG_NAME,"h1")))
    time.sleep(1)
    nft_title = driver.find_element(By.TAG_NAME, "h1").text
    name = str(nft_title)
    img = driver.find_element(By.XPATH, "/html/body/div[1]/div/main/div/div/div/div[2]/div/div[1]/div/button/span/img")
    image = img.get_attribute("src")
    time.sleep(1)
    driver.close()
    threshold_loop = True

    while threshold_loop == True:
        page =requests.get("https://api.opensea.io/api/v1/collection/"+project+"/stats?format=json")
        soup = BeautifulSoup(page.content, "html.parser")
        nft_content = str(soup).split('floor_price')    
        floor_price = re.findall("\d+\.\d+",str(nft_content[1]))    
        l = ("https://opensea.io/collection/"+project)
        p_floor = float(floor[0])
        c_floor = float(floor_price[-1])
    
        if floor[0] != 0:
            if c_floor >= float(threshold_up) and c_floor != p_floor:
                p = calculatePercentage(c_floor,floor[0])
                priceRiseAlertTM(discord_webhook, name, image, c_floor, p_floor, p, l,mode,threshold_up)
                floor.append(c_floor)
                floor.pop(0)
                time.sleep(3)
            if c_floor <= float(threshold_down) and c_floor != p_floor:
                p = calculatePercentage(c_floor,floor[0])
                priceDropAlertTM(discord_webhook, name, image, c_floor, p_floor, p, l,mode,threshold_down)
                floor.append(c_floor)
                floor.pop(0)
                time.sleep(3)
            else:
                time.sleep(int(interval))
        if floor[0] == 0:
            floor.append(c_floor)
            floor.pop(0)    
            startAlertTM(discord_webhook, name, image, c_floor, l,mode,threshold_up,threshold_down)     
            time.sleep(3)
    
def rapid_mode(floor,nft_content,nft_image,project,mode,interval,percentage):
    mode = "Rapid Mode"
    print("Starting Task")
    ua = UserAgent()
    options = Options()
    options.add_argument('--headless')
    options.add_argument('--disable-gpu')
    options.add_argument(f'user-agent={ua.random}')
    service = Service(ChromeDriverManager().install())
    service.creationflags = CREATE_NO_WINDOW
    driver = webdriver.Chrome(service=service, options=options)
    wait = WebDriverWait(driver,60)
    driver.get("https://opensea.io/collection/"+str(project))
    w_load = wait.until(EC.presence_of_element_located((By.TAG_NAME,"h1")))
    time.sleep(1)
    nft_title = driver.find_element(By.TAG_NAME, "h1").text
    name = str(nft_title)
    img = driver.find_element(By.XPATH, "/html/body/div[1]/div/main/div/div/div/div[2]/div/div[1]/div/button/span/img")
    image = img.get_attribute("src")
    time.sleep(1)
    driver.close()
    rapid_loop = True

    while rapid_loop == True:
        page =requests.get("https://api.opensea.io/api/v1/collection/"+project+"/stats?format=json")
        soup = BeautifulSoup(page.content, "html.parser")
        nft_content = str(soup).split('floor_price')    
        floor_price = re.findall("\d+\.\d+",str(nft_content[1]))    
        l = ("https://opensea.io/collection/"+project)
        p_floor = float(floor[0])
        c_floor = float(floor_price[-1])
        if c_floor != floor[0]:
            if floor[0] != 0:
                p = calculatePercentage(c_floor,floor[0])
                if c_floor < floor[0] and p >= float(percentage):            
                    floor.append(c_floor)
                    floor.pop(0)
                    priceDropAlert(discord_webhook, name, image, c_floor, p_floor, p, l,mode)
                    time.sleep(3)   
                if c_floor > floor[0] and p >= float(percentage):            
                    floor.append(c_floor)
                    floor.pop(0)
                    priceRiseAlert(discord_webhook, name, image, c_floor, p_floor, p, l,mode)
                    time.sleep(3)   
                else:       
                    time.sleep(2)
            if floor[0] == 0:
                floor.append(c_floor)
                floor.pop(0)    
                startAlert(discord_webhook, name, image, c_floor, l,mode)     
                time.sleep(3)   
        else:
            time.sleep(2)
        time.sleep(int(interval))

def schedule_mode(floor,nft_content,nft_image,project,mode,interval):
    mode = "Schedule Mode" 
    print('Starting Task')
    ua = UserAgent()
    options = Options()
    options.add_argument('--headless')
    options.add_argument('--disable-gpu')
    options.add_argument(f'user-agent={ua.random}')
    service = Service(ChromeDriverManager().install())
    service.creationflags = CREATE_NO_WINDOW
    driver = webdriver.Chrome(service=service, options=options)
    wait = WebDriverWait(driver,60)
    driver.get("https://opensea.io/collection/"+str(project))
    w_load = wait.until(EC.presence_of_element_located((By.TAG_NAME,"h1")))
    time.sleep(1)
    nft_title = driver.find_element(By.TAG_NAME, "h1").text
    name = str(nft_title)
    img = driver.find_element(By.XPATH, "/html/body/div[1]/div/main/div/div/div/div[2]/div/div[1]/div/button/span/img")
    image = img.get_attribute("src")
    time.sleep(1)
    driver.close()
    schedule_loop = True

    while schedule_loop == True:
        page =requests.get("https://api.opensea.io/api/v1/collection/"+project+"/stats?format=json")
        soup = BeautifulSoup(page.content, "html.parser")
        nft_content = str(soup).split('floor_price')    
        floor_price = re.findall("\d+\.\d+",str(nft_content[1]))    
        l = ("https://opensea.io/collection/"+project)
        p_floor = float(floor[0])
        c_floor = float(floor_price[-1])
        if floor[0] != 0:
            p = calculatePercentage(c_floor,floor[0])
            if c_floor < floor[0]:
                priceStatus = "**:small_red_triangle_down: PRICE DROP**"
                color_code = "0xe74c3c"
                name_PF = "**Previous Floor **"
                name_p = "Price Drop Percentage"

            if c_floor > floor[0]:
                priceStatus = "**:green_circle: PRICE RISES**"
                color_code = "0x2ecc71"
                name_PF = "**Previous Floor **"
                name_p = "Price Rises Percentage"
            if c_floor == floor[0]:
                priceStatus = " "
                color_code = "0x11806a"
                name_PF = "N/A"
                name_p = "N/A"
                p = "N/A"
                p_floor = "N/A"
            floor.append(c_floor)
            floor.pop(0)
            priceAlertSM(discord_webhook, name, image, c_floor, p_floor, p, l,mode,priceStatus,color_code,name_PF,name_p)
            time.sleep(3)
        if floor[0] == 0:
            floor.append(c_floor)
            floor.pop(0)
            startAlertSM(discord_webhook, name, image, c_floor, l,mode) 
            time.sleep(3)
        time.sleep(int(interval))
    
if __name__ == "__main__":
    multiprocessing.freeze_support()
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.show()
    sys.exit(app.exec_())
